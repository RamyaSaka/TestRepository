{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Pyolite",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "<p style=\"text-align:center\">\n    <a href=\"https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork971-2022-01-01\" target=\"_blank\">\n    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"200\" alt=\"Skills Network Logo\"  />\n    </a>\n</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "# House Sales in King County, USA\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "This dataset contains house sale prices for King County, which includes Seattle. It includes homes sold between May 2014 and May 2015.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "| Variable      | Description                                                                                                 |\n| ------------- | ----------------------------------------------------------------------------------------------------------- |\n| id            | A notation for a house                                                                                      |\n| date          | Date house was sold                                                                                         |\n| price         | Price is prediction target                                                                                  |\n| bedrooms      | Number of bedrooms                                                                                          |\n| bathrooms     | Number of bathrooms                                                                                         |\n| sqft_living   | Square footage of the home                                                                                  |\n| sqft_lot      | Square footage of the lot                                                                                   |\n| floors        | Total floors (levels) in house                                                                              |\n| waterfront    | House which has a view to a waterfront                                                                      |\n| view          | Has been viewed                                                                                             |\n| condition     | How good the condition is overall                                                                           |\n| grade         | overall grade given to the housing unit, based on King County grading system                                |\n| sqft_above    | Square footage of house apart from basement                                                                 |\n| sqft_basement | Square footage of the basement                                                                              |\n| yr_built      | Built Year                                                                                                  |\n| yr_renovated  | Year when house was renovated                                                                               |\n| zipcode       | Zip code                                                                                                    |\n| lat           | Latitude coordinate                                                                                         |\n| long          | Longitude coordinate                                                                                        |\n| sqft_living15 | Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area |\n| sqft_lot15    | LotSize area in 2015(implies-- some renovations)                                                            |\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "If you run the lab locally using Anaconda, you can load the correct library and versions by uncommenting the following:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "# All Libraries required for this lab are listed below. The libraries pre-installed on Skills Network Labs are commented.\n# !mamba install -qy pandas==1.3.4 numpy==1.21.4 seaborn==0.9.0 matplotlib==3.5.0 scikit-learn==0.20.1\n# Note: If your environment doesn't support \"!mamba install\", use \"!pip install\"",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": " # Surpress warnings:\ndef warn(*args, **kwargs):\n    pass\nimport warnings\nwarnings.warn = warn",
      "metadata": {
        "trusted": true
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "You will require the following libraries:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "import piplite\nawait piplite.install(['pandas','matplotlib','scikit-learn','seaborn', 'numpy'])\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler,PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n%matplotlib inline",
      "metadata": {
        "trusted": true
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "# Module 1: Importing Data Sets\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "The functions below will download the dataset into your browser:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from pyodide.http import pyfetch\n\nasync def download(url, filename):\n    response = await pyfetch(url)\n    if response.status == 200:\n        with open(filename, \"wb\") as f:\n            f.write(await response.bytes())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "file_name='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv'",
      "metadata": {
        "trusted": true
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "You will need to download the dataset; if you are running locally, please comment out the following code: \n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "await download(file_name, \"kc_house_data_NaN.csv\")\nfile_name=\"kc_house_data_NaN.csv\"",
      "metadata": {
        "trusted": true
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Use the Pandas method <b>read_csv()</b> to load the data from the web address.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df = pd.read_csv(file_name)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We use the method <code>head</code> to display the first 5 columns of the dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.head()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 8,
      "outputs": [
        {
          "execution_count": 8,
          "output_type": "execute_result",
          "data": {
            "text/plain": "   Unnamed: 0          id             date     price  bedrooms  bathrooms  \\\n0           0  7129300520  20141013T000000  221900.0       3.0       1.00   \n1           1  6414100192  20141209T000000  538000.0       3.0       2.25   \n2           2  5631500400  20150225T000000  180000.0       2.0       1.00   \n3           3  2487200875  20141209T000000  604000.0       4.0       3.00   \n4           4  1954400510  20150218T000000  510000.0       3.0       2.00   \n\n   sqft_living  sqft_lot  floors  waterfront  ...  grade  sqft_above  \\\n0         1180      5650     1.0           0  ...      7        1180   \n1         2570      7242     2.0           0  ...      7        2170   \n2          770     10000     1.0           0  ...      6         770   \n3         1960      5000     1.0           0  ...      7        1050   \n4         1680      8080     1.0           0  ...      8        1680   \n\n   sqft_basement  yr_built  yr_renovated  zipcode      lat     long  \\\n0              0      1955             0    98178  47.5112 -122.257   \n1            400      1951          1991    98125  47.7210 -122.319   \n2              0      1933             0    98028  47.7379 -122.233   \n3            910      1965             0    98136  47.5208 -122.393   \n4              0      1987             0    98074  47.6168 -122.045   \n\n   sqft_living15  sqft_lot15  \n0           1340        5650  \n1           1690        7639  \n2           2720        8062  \n3           1360        5000  \n4           1800        7503  \n\n[5 rows x 22 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>date</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>7129300520</td>\n      <td>20141013T000000</td>\n      <td>221900.0</td>\n      <td>3.0</td>\n      <td>1.00</td>\n      <td>1180</td>\n      <td>5650</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1180</td>\n      <td>0</td>\n      <td>1955</td>\n      <td>0</td>\n      <td>98178</td>\n      <td>47.5112</td>\n      <td>-122.257</td>\n      <td>1340</td>\n      <td>5650</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>6414100192</td>\n      <td>20141209T000000</td>\n      <td>538000.0</td>\n      <td>3.0</td>\n      <td>2.25</td>\n      <td>2570</td>\n      <td>7242</td>\n      <td>2.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>2170</td>\n      <td>400</td>\n      <td>1951</td>\n      <td>1991</td>\n      <td>98125</td>\n      <td>47.7210</td>\n      <td>-122.319</td>\n      <td>1690</td>\n      <td>7639</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>5631500400</td>\n      <td>20150225T000000</td>\n      <td>180000.0</td>\n      <td>2.0</td>\n      <td>1.00</td>\n      <td>770</td>\n      <td>10000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>6</td>\n      <td>770</td>\n      <td>0</td>\n      <td>1933</td>\n      <td>0</td>\n      <td>98028</td>\n      <td>47.7379</td>\n      <td>-122.233</td>\n      <td>2720</td>\n      <td>8062</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>2487200875</td>\n      <td>20141209T000000</td>\n      <td>604000.0</td>\n      <td>4.0</td>\n      <td>3.00</td>\n      <td>1960</td>\n      <td>5000</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>7</td>\n      <td>1050</td>\n      <td>910</td>\n      <td>1965</td>\n      <td>0</td>\n      <td>98136</td>\n      <td>47.5208</td>\n      <td>-122.393</td>\n      <td>1360</td>\n      <td>5000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1954400510</td>\n      <td>20150218T000000</td>\n      <td>510000.0</td>\n      <td>3.0</td>\n      <td>2.00</td>\n      <td>1680</td>\n      <td>8080</td>\n      <td>1.0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>8</td>\n      <td>1680</td>\n      <td>0</td>\n      <td>1987</td>\n      <td>0</td>\n      <td>98074</td>\n      <td>47.6168</td>\n      <td>-122.045</td>\n      <td>1800</td>\n      <td>7503</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 1\n\nDisplay the data types of each column using the function dtypes, then take a screenshot and submit it, include your code in the image.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "print(df.dtypes)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 11,
      "outputs": [
        {
          "name": "stdout",
          "text": "Unnamed: 0         int64\nid                 int64\ndate              object\nprice            float64\nbedrooms         float64\nbathrooms        float64\nsqft_living        int64\nsqft_lot           int64\nfloors           float64\nwaterfront         int64\nview               int64\ncondition          int64\ngrade              int64\nsqft_above         int64\nsqft_basement      int64\nyr_built           int64\nyr_renovated       int64\nzipcode            int64\nlat              float64\nlong             float64\nsqft_living15      int64\nsqft_lot15         int64\ndtype: object\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We use the method describe to obtain a statistical summary of the dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.describe()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 12,
      "outputs": [
        {
          "execution_count": 12,
          "output_type": "execute_result",
          "data": {
            "text/plain": "        Unnamed: 0            id         price      bedrooms     bathrooms  \\\ncount  21613.00000  2.161300e+04  2.161300e+04  21600.000000  21603.000000   \nmean   10806.00000  4.580302e+09  5.400881e+05      3.372870      2.115736   \nstd     6239.28002  2.876566e+09  3.671272e+05      0.926657      0.768996   \nmin        0.00000  1.000102e+06  7.500000e+04      1.000000      0.500000   \n25%     5403.00000  2.123049e+09  3.219500e+05      3.000000      1.750000   \n50%    10806.00000  3.904930e+09  4.500000e+05      3.000000      2.250000   \n75%    16209.00000  7.308900e+09  6.450000e+05      4.000000      2.500000   \nmax    21612.00000  9.900000e+09  7.700000e+06     33.000000      8.000000   \n\n        sqft_living      sqft_lot        floors    waterfront          view  \\\ncount  21613.000000  2.161300e+04  21613.000000  21613.000000  21613.000000   \nmean    2079.899736  1.510697e+04      1.494309      0.007542      0.234303   \nstd      918.440897  4.142051e+04      0.539989      0.086517      0.766318   \nmin      290.000000  5.200000e+02      1.000000      0.000000      0.000000   \n25%     1427.000000  5.040000e+03      1.000000      0.000000      0.000000   \n50%     1910.000000  7.618000e+03      1.500000      0.000000      0.000000   \n75%     2550.000000  1.068800e+04      2.000000      0.000000      0.000000   \nmax    13540.000000  1.651359e+06      3.500000      1.000000      4.000000   \n\n       ...         grade    sqft_above  sqft_basement      yr_built  \\\ncount  ...  21613.000000  21613.000000   21613.000000  21613.000000   \nmean   ...      7.656873   1788.390691     291.509045   1971.005136   \nstd    ...      1.175459    828.090978     442.575043     29.373411   \nmin    ...      1.000000    290.000000       0.000000   1900.000000   \n25%    ...      7.000000   1190.000000       0.000000   1951.000000   \n50%    ...      7.000000   1560.000000       0.000000   1975.000000   \n75%    ...      8.000000   2210.000000     560.000000   1997.000000   \nmax    ...     13.000000   9410.000000    4820.000000   2015.000000   \n\n       yr_renovated       zipcode           lat          long  sqft_living15  \\\ncount  21613.000000  21613.000000  21613.000000  21613.000000   21613.000000   \nmean      84.402258  98077.939805     47.560053   -122.213896    1986.552492   \nstd      401.679240     53.505026      0.138564      0.140828     685.391304   \nmin        0.000000  98001.000000     47.155900   -122.519000     399.000000   \n25%        0.000000  98033.000000     47.471000   -122.328000    1490.000000   \n50%        0.000000  98065.000000     47.571800   -122.230000    1840.000000   \n75%        0.000000  98118.000000     47.678000   -122.125000    2360.000000   \nmax     2015.000000  98199.000000     47.777600   -121.315000    6210.000000   \n\n          sqft_lot15  \ncount   21613.000000  \nmean    12768.455652  \nstd     27304.179631  \nmin       651.000000  \n25%      5100.000000  \n50%      7620.000000  \n75%     10083.000000  \nmax    871200.000000  \n\n[8 rows x 21 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>id</th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>...</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>21613.00000</td>\n      <td>2.161300e+04</td>\n      <td>2.161300e+04</td>\n      <td>21600.000000</td>\n      <td>21603.000000</td>\n      <td>21613.000000</td>\n      <td>2.161300e+04</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>...</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>10806.00000</td>\n      <td>4.580302e+09</td>\n      <td>5.400881e+05</td>\n      <td>3.372870</td>\n      <td>2.115736</td>\n      <td>2079.899736</td>\n      <td>1.510697e+04</td>\n      <td>1.494309</td>\n      <td>0.007542</td>\n      <td>0.234303</td>\n      <td>...</td>\n      <td>7.656873</td>\n      <td>1788.390691</td>\n      <td>291.509045</td>\n      <td>1971.005136</td>\n      <td>84.402258</td>\n      <td>98077.939805</td>\n      <td>47.560053</td>\n      <td>-122.213896</td>\n      <td>1986.552492</td>\n      <td>12768.455652</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6239.28002</td>\n      <td>2.876566e+09</td>\n      <td>3.671272e+05</td>\n      <td>0.926657</td>\n      <td>0.768996</td>\n      <td>918.440897</td>\n      <td>4.142051e+04</td>\n      <td>0.539989</td>\n      <td>0.086517</td>\n      <td>0.766318</td>\n      <td>...</td>\n      <td>1.175459</td>\n      <td>828.090978</td>\n      <td>442.575043</td>\n      <td>29.373411</td>\n      <td>401.679240</td>\n      <td>53.505026</td>\n      <td>0.138564</td>\n      <td>0.140828</td>\n      <td>685.391304</td>\n      <td>27304.179631</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.00000</td>\n      <td>1.000102e+06</td>\n      <td>7.500000e+04</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>290.000000</td>\n      <td>5.200000e+02</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>290.000000</td>\n      <td>0.000000</td>\n      <td>1900.000000</td>\n      <td>0.000000</td>\n      <td>98001.000000</td>\n      <td>47.155900</td>\n      <td>-122.519000</td>\n      <td>399.000000</td>\n      <td>651.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>5403.00000</td>\n      <td>2.123049e+09</td>\n      <td>3.219500e+05</td>\n      <td>3.000000</td>\n      <td>1.750000</td>\n      <td>1427.000000</td>\n      <td>5.040000e+03</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>7.000000</td>\n      <td>1190.000000</td>\n      <td>0.000000</td>\n      <td>1951.000000</td>\n      <td>0.000000</td>\n      <td>98033.000000</td>\n      <td>47.471000</td>\n      <td>-122.328000</td>\n      <td>1490.000000</td>\n      <td>5100.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>10806.00000</td>\n      <td>3.904930e+09</td>\n      <td>4.500000e+05</td>\n      <td>3.000000</td>\n      <td>2.250000</td>\n      <td>1910.000000</td>\n      <td>7.618000e+03</td>\n      <td>1.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>7.000000</td>\n      <td>1560.000000</td>\n      <td>0.000000</td>\n      <td>1975.000000</td>\n      <td>0.000000</td>\n      <td>98065.000000</td>\n      <td>47.571800</td>\n      <td>-122.230000</td>\n      <td>1840.000000</td>\n      <td>7620.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>16209.00000</td>\n      <td>7.308900e+09</td>\n      <td>6.450000e+05</td>\n      <td>4.000000</td>\n      <td>2.500000</td>\n      <td>2550.000000</td>\n      <td>1.068800e+04</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>8.000000</td>\n      <td>2210.000000</td>\n      <td>560.000000</td>\n      <td>1997.000000</td>\n      <td>0.000000</td>\n      <td>98118.000000</td>\n      <td>47.678000</td>\n      <td>-122.125000</td>\n      <td>2360.000000</td>\n      <td>10083.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>21612.00000</td>\n      <td>9.900000e+09</td>\n      <td>7.700000e+06</td>\n      <td>33.000000</td>\n      <td>8.000000</td>\n      <td>13540.000000</td>\n      <td>1.651359e+06</td>\n      <td>3.500000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>...</td>\n      <td>13.000000</td>\n      <td>9410.000000</td>\n      <td>4820.000000</td>\n      <td>2015.000000</td>\n      <td>2015.000000</td>\n      <td>98199.000000</td>\n      <td>47.777600</td>\n      <td>-121.315000</td>\n      <td>6210.000000</td>\n      <td>871200.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 21 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 2: Data Wrangling\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Question 2\n\nDrop the columns <code>\"id\"</code>  and <code>\"Unnamed: 0\"</code> from axis 1 using the method <code>drop()</code>, then use the method <code>describe()</code> to obtain a statistical summary of the data. Take a screenshot and submit it, make sure the <code>inplace</code> parameter is set to <code>True</code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.drop(['id',\"Unnamed: 0\"], axis=1, inplace=True)\ndf.describe()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 13,
      "outputs": [
        {
          "execution_count": 13,
          "output_type": "execute_result",
          "data": {
            "text/plain": "              price      bedrooms     bathrooms   sqft_living      sqft_lot  \\\ncount  2.161300e+04  21600.000000  21603.000000  21613.000000  2.161300e+04   \nmean   5.400881e+05      3.372870      2.115736   2079.899736  1.510697e+04   \nstd    3.671272e+05      0.926657      0.768996    918.440897  4.142051e+04   \nmin    7.500000e+04      1.000000      0.500000    290.000000  5.200000e+02   \n25%    3.219500e+05      3.000000      1.750000   1427.000000  5.040000e+03   \n50%    4.500000e+05      3.000000      2.250000   1910.000000  7.618000e+03   \n75%    6.450000e+05      4.000000      2.500000   2550.000000  1.068800e+04   \nmax    7.700000e+06     33.000000      8.000000  13540.000000  1.651359e+06   \n\n             floors    waterfront          view     condition         grade  \\\ncount  21613.000000  21613.000000  21613.000000  21613.000000  21613.000000   \nmean       1.494309      0.007542      0.234303      3.409430      7.656873   \nstd        0.539989      0.086517      0.766318      0.650743      1.175459   \nmin        1.000000      0.000000      0.000000      1.000000      1.000000   \n25%        1.000000      0.000000      0.000000      3.000000      7.000000   \n50%        1.500000      0.000000      0.000000      3.000000      7.000000   \n75%        2.000000      0.000000      0.000000      4.000000      8.000000   \nmax        3.500000      1.000000      4.000000      5.000000     13.000000   \n\n         sqft_above  sqft_basement      yr_built  yr_renovated       zipcode  \\\ncount  21613.000000   21613.000000  21613.000000  21613.000000  21613.000000   \nmean    1788.390691     291.509045   1971.005136     84.402258  98077.939805   \nstd      828.090978     442.575043     29.373411    401.679240     53.505026   \nmin      290.000000       0.000000   1900.000000      0.000000  98001.000000   \n25%     1190.000000       0.000000   1951.000000      0.000000  98033.000000   \n50%     1560.000000       0.000000   1975.000000      0.000000  98065.000000   \n75%     2210.000000     560.000000   1997.000000      0.000000  98118.000000   \nmax     9410.000000    4820.000000   2015.000000   2015.000000  98199.000000   \n\n                lat          long  sqft_living15     sqft_lot15  \ncount  21613.000000  21613.000000   21613.000000   21613.000000  \nmean      47.560053   -122.213896    1986.552492   12768.455652  \nstd        0.138564      0.140828     685.391304   27304.179631  \nmin       47.155900   -122.519000     399.000000     651.000000  \n25%       47.471000   -122.328000    1490.000000    5100.000000  \n50%       47.571800   -122.230000    1840.000000    7620.000000  \n75%       47.678000   -122.125000    2360.000000   10083.000000  \nmax       47.777600   -121.315000    6210.000000  871200.000000  ",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>bedrooms</th>\n      <th>bathrooms</th>\n      <th>sqft_living</th>\n      <th>sqft_lot</th>\n      <th>floors</th>\n      <th>waterfront</th>\n      <th>view</th>\n      <th>condition</th>\n      <th>grade</th>\n      <th>sqft_above</th>\n      <th>sqft_basement</th>\n      <th>yr_built</th>\n      <th>yr_renovated</th>\n      <th>zipcode</th>\n      <th>lat</th>\n      <th>long</th>\n      <th>sqft_living15</th>\n      <th>sqft_lot15</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>2.161300e+04</td>\n      <td>21600.000000</td>\n      <td>21603.000000</td>\n      <td>21613.000000</td>\n      <td>2.161300e+04</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n      <td>21613.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>5.400881e+05</td>\n      <td>3.372870</td>\n      <td>2.115736</td>\n      <td>2079.899736</td>\n      <td>1.510697e+04</td>\n      <td>1.494309</td>\n      <td>0.007542</td>\n      <td>0.234303</td>\n      <td>3.409430</td>\n      <td>7.656873</td>\n      <td>1788.390691</td>\n      <td>291.509045</td>\n      <td>1971.005136</td>\n      <td>84.402258</td>\n      <td>98077.939805</td>\n      <td>47.560053</td>\n      <td>-122.213896</td>\n      <td>1986.552492</td>\n      <td>12768.455652</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.671272e+05</td>\n      <td>0.926657</td>\n      <td>0.768996</td>\n      <td>918.440897</td>\n      <td>4.142051e+04</td>\n      <td>0.539989</td>\n      <td>0.086517</td>\n      <td>0.766318</td>\n      <td>0.650743</td>\n      <td>1.175459</td>\n      <td>828.090978</td>\n      <td>442.575043</td>\n      <td>29.373411</td>\n      <td>401.679240</td>\n      <td>53.505026</td>\n      <td>0.138564</td>\n      <td>0.140828</td>\n      <td>685.391304</td>\n      <td>27304.179631</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>7.500000e+04</td>\n      <td>1.000000</td>\n      <td>0.500000</td>\n      <td>290.000000</td>\n      <td>5.200000e+02</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>290.000000</td>\n      <td>0.000000</td>\n      <td>1900.000000</td>\n      <td>0.000000</td>\n      <td>98001.000000</td>\n      <td>47.155900</td>\n      <td>-122.519000</td>\n      <td>399.000000</td>\n      <td>651.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.219500e+05</td>\n      <td>3.000000</td>\n      <td>1.750000</td>\n      <td>1427.000000</td>\n      <td>5.040000e+03</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>7.000000</td>\n      <td>1190.000000</td>\n      <td>0.000000</td>\n      <td>1951.000000</td>\n      <td>0.000000</td>\n      <td>98033.000000</td>\n      <td>47.471000</td>\n      <td>-122.328000</td>\n      <td>1490.000000</td>\n      <td>5100.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.500000e+05</td>\n      <td>3.000000</td>\n      <td>2.250000</td>\n      <td>1910.000000</td>\n      <td>7.618000e+03</td>\n      <td>1.500000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>7.000000</td>\n      <td>1560.000000</td>\n      <td>0.000000</td>\n      <td>1975.000000</td>\n      <td>0.000000</td>\n      <td>98065.000000</td>\n      <td>47.571800</td>\n      <td>-122.230000</td>\n      <td>1840.000000</td>\n      <td>7620.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>6.450000e+05</td>\n      <td>4.000000</td>\n      <td>2.500000</td>\n      <td>2550.000000</td>\n      <td>1.068800e+04</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>8.000000</td>\n      <td>2210.000000</td>\n      <td>560.000000</td>\n      <td>1997.000000</td>\n      <td>0.000000</td>\n      <td>98118.000000</td>\n      <td>47.678000</td>\n      <td>-122.125000</td>\n      <td>2360.000000</td>\n      <td>10083.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7.700000e+06</td>\n      <td>33.000000</td>\n      <td>8.000000</td>\n      <td>13540.000000</td>\n      <td>1.651359e+06</td>\n      <td>3.500000</td>\n      <td>1.000000</td>\n      <td>4.000000</td>\n      <td>5.000000</td>\n      <td>13.000000</td>\n      <td>9410.000000</td>\n      <td>4820.000000</td>\n      <td>2015.000000</td>\n      <td>2015.000000</td>\n      <td>98199.000000</td>\n      <td>47.777600</td>\n      <td>-121.315000</td>\n      <td>6210.000000</td>\n      <td>871200.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can see we have missing values for the columns <code> bedrooms</code>  and <code> bathrooms </code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())\n",
      "metadata": {
        "trusted": true
      },
      "execution_count": 14,
      "outputs": [
        {
          "name": "stdout",
          "text": "number of NaN values for the column bedrooms : 13\nnumber of NaN values for the column bathrooms : 10\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We can replace the missing values of the column <code>'bedrooms'</code> with the mean of the column  <code>'bedrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code>inplace</code> parameter to <code>True</code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "mean=df['bedrooms'].mean()\ndf['bedrooms'].replace(np.nan,mean, inplace=True)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "We also replace the missing values of the column <code>'bathrooms'</code> with the mean of the column  <code>'bathrooms' </code> using the method <code>replace()</code>. Don't forget to set the <code> inplace </code>  parameter top <code> True </code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "mean=df['bathrooms'].mean()\ndf['bathrooms'].replace(np.nan,mean, inplace=True)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "print(\"number of NaN values for the column bedrooms :\", df['bedrooms'].isnull().sum())\nprint(\"number of NaN values for the column bathrooms :\", df['bathrooms'].isnull().sum())",
      "metadata": {
        "trusted": true
      },
      "execution_count": 17,
      "outputs": [
        {
          "name": "stdout",
          "text": "number of NaN values for the column bedrooms : 0\nnumber of NaN values for the column bathrooms : 0\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 3: Exploratory Data Analysis\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "### Question 3\n\nUse the method <code>value_counts</code> to count the number of houses with unique floor values, use the method <code>.to_frame()</code> to convert it to a dataframe.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df['floors'].value_counts().to_frame()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 19,
      "outputs": [
        {
          "execution_count": 19,
          "output_type": "execute_result",
          "data": {
            "text/plain": "     floors\n1.0   10680\n2.0    8241\n1.5    1910\n3.0     613\n2.5     161\n3.5       8",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>floors</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1.0</th>\n      <td>10680</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>8241</td>\n    </tr>\n    <tr>\n      <th>1.5</th>\n      <td>1910</td>\n    </tr>\n    <tr>\n      <th>3.0</th>\n      <td>613</td>\n    </tr>\n    <tr>\n      <th>2.5</th>\n      <td>161</td>\n    </tr>\n    <tr>\n      <th>3.5</th>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "\n\n### Question 4\n\nUse the function <code>boxplot</code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.boxplot(x=\"waterfront\", y=\"price\", data=df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 20,
      "outputs": [
        {
          "execution_count": 20,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='waterfront', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 5\n\nUse the function <code>regplot</code>  in the seaborn library  to  determine if the feature <code>sqft_above</code> is negatively or positively correlated with price.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "sns.regplot(x=\"sqft_above\", y=\"price\", data=df)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 21,
      "outputs": [
        {
          "execution_count": 21,
          "output_type": "execute_result",
          "data": {
            "text/plain": "<AxesSubplot:xlabel='sqft_above', ylabel='price'>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 640x480 with 1 Axes>",
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAioAAAHACAYAAACMB0PKAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAA9hAAAPYQGoP6dpAACXx0lEQVR4nOzdeXycV30v/s85zzb7aLcsW3ZiO4tjOyGQjSQk0JsCKZcS2tILDSUJ0EvThC2X/i5JgZKyGMpy4bbgpoEbEpakCSVAuRcCpMUhdXayyI4Tb0m8SLIkS5p9nu2c3x/P84xmpJE0kiXNjPR9v16GWBrNPBrJc75zzndhUkoJQgghhJAGxOt9AYQQQggh06FAhRBCCCENiwIVQgghhDQsClQIIYQQ0rAoUCGEEEJIw6JAhRBCCCENiwIVQgghhDQsClQIIYQQ0rAoUCGEEEJIw6JAhRBCCCENa9kEKg899BDe+ta3oqenB4wx/PjHP57zfUgp8eUvfxmnn346DMPAmjVr8LnPfW7hL5YQQgghNVHrfQELJZfL4ZxzzsF73/te/NEf/dG87uPDH/4wfvnLX+LLX/4ytm3bhtHRUYyOji7wlRJCCCGkVmw5DiVkjOH+++/HVVddVfqYaZr4m7/5G9x9990YHx/H1q1b8cUvfhGvf/3rAQB79+7F2Wefjd27d+OMM86oz4UTQgghpMKyOfqZzY033ohHHnkE99xzD5577jm84x3vwJvf/Gbs378fAPBv//Zv2LBhA372s5/h1FNPxSmnnIL3v//9tKNCCCGE1NGKCFQOHz6MO+64A/fddx9e97rXYePGjfjYxz6GSy+9FHfccQcA4NChQ3jllVdw33334a677sJ3vvMdPPXUU/iTP/mTOl89IYQQsnItmxyVmfT19cF1XZx++ukVHzdNE+3t7QAAIQRM08Rdd91Vut23v/1tvOY1r8GLL75Ix0GEEEJIHayIQCWbzUJRFDz11FNQFKXic7FYDACwevVqqKpaEcxs3rwZgLcjQ4EKIYQQsvRWRKBy7rnnwnVdDA0N4XWve13V21xyySVwHAcHDx7Exo0bAQD79u0DAKxfv37JrpUQQgghE5ZN1U82m8WBAwcAeIHJV7/6VbzhDW9AW1sb1q1bh3e/+934z//8T3zlK1/Bueeei+HhYTz44IM4++yz8Za3vAVCCJx//vmIxWL42te+BiEEbrjhBiQSCfzyl7+s83dHCCGErEzLJlD5zW9+gze84Q1TPn7NNdfgO9/5Dmzbxmc/+1ncddddOHbsGDo6OnDRRRfh1ltvxbZt2wAA/f39+OAHP4hf/vKXiEajuPLKK/GVr3wFbW1tS/3tEEIIIQTLKFAhhBBCyPKzIsqTCSGEENKcKFAhhBBCSMOqa9WP67r49Kc/je9973sYHBxET08Prr32WnziE58AY2zWrxdCoL+/H/F4vKbbE0IIIaT+pJTIZDLo6ekB5zPvmdQ1UPniF7+IHTt24M4778SWLVvw5JNP4rrrrkMymcSHPvShWb++v78fvb29S3ClhBBCCFloR44cwdq1a2e8TV0DlV27duFtb3sb3vKWtwAATjnlFNx99914/PHHa/r6eDwOwPtGE4nEol0nIYQQQhZOOp1Gb29vaR2fSV0DlYsvvhj//M//jH379uH000/Hs88+i4cffhhf/epXa/r64LgnkUhQoEIIIYQ0mVrSNuoaqHz84x9HOp3GmWeeCUVR4LouPve5z+Hqq6+uenvTNGGaZunv6XR6qS6VEEIIIXVQ16qfe++9F9///vfxgx/8AL/73e9w55134stf/jLuvPPOqrffvn07kslk6Q/lpxBCCCHLW10bvvX29uLjH/84brjhhtLHPvvZz+J73/seXnjhhSm3r7aj0tvbi1QqRUc/hBBCSJNIp9NIJpM1rd91PfrJ5/NTypIURYEQourtDcOAYRhLcWmEEEIIaQB1DVTe+ta34nOf+xzWrVuHLVu24Omnn8ZXv/pVvPe9763nZRFCCCGkQdT16CeTyeCTn/wk7r//fgwNDaGnpwfvete78KlPfQq6rs/69XPZOiKEEEJIY5jL+t3UQwkpUCGEEEKaz1zWb5r1QwghhJCGRYEKIYQQQhpWXZNpCSGEkJVGCIk9/WmM5i20RXRs6UmAcxqsOx0KVAghhJAlsuvACHbsPIiDQ1nYroSmMGzsiuH6yzfi4k0d9b68hkRHP4QQQsgS2HVgBLfc34e9A2lEDRVdcQNRQ8XegQxuub8Puw6M1PsSGxIFKoQQQsgiE0Jix86DyJoOuhMhhDQFnDOENAXdCQNZ08WOnQchRNMW4i4aClQIIYSQRbanP42DQ1m0RvQpE4MZY2iJaDg4lMWefhq2OxkFKoQQQsgiG81bsF0JXam+7BoKhy0kRvPWEl9Z46NAhRBCCFlkbREdmsJgudVn2ZmugMYZ2iKzd2VfaShQIYQQQhbZlp4ENnbFMJa3MbkhvJQS43kbG7ti2NJDXdYno0CFEEIIWWScM1x/+UbEDAWDaRMF24UQEgXbxWDaRMxQcP3lG6mfShUUqBBCCCFL4OJNHfj827dh8+o48qaDoayJvOlg8+o4Pv/2bdRHZRrU8I0QQghZIhdv6sBFG9qpM+0cUKBCCCGELCHOGbatTdb7MpoGHf0QQgghpGFRoEIIIYSQhkWBCiGEEEIaFgUqhBBCCGlYFKgQQgghpGFRoEIIIYSQhkWBCiGEEEIaFgUqhBBCCGlYFKgQQgghpGFRoEIIIYSQhkWBCiGEEEIaFgUqhBBCCGlYFKgQQgghpGFRoEIIIYSQhkWBCiGEEEIaFgUqhBBCCGlYar0vgBBCCDkZQkjs6U9jNG+hLaJjS08CnLN6XxZZIBSoEEIIaVq7Doxgx86DODiUhe1KaArDxq4Yrr98Iy7e1FHvyyMLgI5+CCGENKVdB0Zwy/192DuQRtRQ0RU3EDVU7B3I4Jb7+7DrwEi9L5EsgLoGKqeccgoYY1P+3HDDDfW8LEIIIQ1OCIkdOw8iazroToQQ0hRwzhDSFHQnDGRNFzt2HoQQst6XSk5SXQOVJ554AgMDA6U/v/rVrwAA73jHO+p5WYQQQhrcnv40Dg5l0RrRwVhlPgpjDC0RDQeHstjTn67TFZKFUtcclc7Ozoq/f+ELX8DGjRtx+eWX1+mKCCGENIPRvAXbldCV6u+3DYUjJSRG89YSXxlZaA2To2JZFr73ve/hve9975TomBBCCCnXFtGhKQyWK6p+3nQFNM7QFtGX+MrIQmuYqp8f//jHGB8fx7XXXjvtbUzThGmapb+n07SlRwghK9GWngQ2dsWwdyCD7gSveIMrpcR43sbm1XFs6UnU8SrJQmiYHZVvf/vbuPLKK9HT0zPtbbZv345kMln609vbu4RXSAghpFFwznD95RsRMxQMpk0UbBdCSBRsF4NpEzFDwfWXb1xW/VSEkOg7msLOfcPoO5paMYnCTEpZ9+/0lVdewYYNG/CjH/0Ib3vb26a9XbUdld7eXqRSKSQSFDUTQshKU9FHRUhofHn2UVlu/WLS6TSSyWRN63dDHP3ccccd6Orqwlve8pYZb2cYBgzDWKKrIoQQ0ugu3tSBiza0L+vOtEG/mKzpoDWiQ1c4LFeU+sV8/u3bmjJYqVXdAxUhBO644w5cc801UNW6Xw4hhJAmwznDtrXJel/GopjcLybIxQlxBd0JjsG0iR07D+KiDe3LKjgrV/cclV//+tc4fPgw3vve99b7UgghhJCGQv1iGmBH5Y1vfCMaIE2GEEIIaTjUL6YBdlQIIYQQUh31i6FAhRBCCGlYQb+Ysbw95fQh6BezsSu2rPvFUKBCCCGENKiV2C9mMgpUCCGEkAZ28aYOfP7t27B5dRx508FQ1kTedLB5dXzZlyYDDZBMSwghhJCZrYR+MdOhQIUQQghpAsu5X8xM6OiHEEIIIQ2LAhVCCCGENCwKVAghhBDSsChQIYQQQkjDokCFEEIIIQ2LAhVCCCGENCwKVAghhBDSsChQIYQQQkjDokCFEEIIIQ2LAhVCCCGENCwKVAghhBDSsChQIYQQQkjDokCFEEIIIQ2LAhVCCCGENCwKVAghhBDSsChQIYQQQkjDokCFEEIIIQ2LAhVCCCGENCwKVAghhBDSsChQIYQQQkjDokCFEEIIIQ2LAhVCCCGENCwKVAghhBDSsChQIYQQQkjDokCFEEIIIQ2LAhVCCCGENCwKVAghhBDSsOoeqBw7dgzvfve70d7ejnA4jG3btuHJJ5+s92URQgghpAGo9XzwsbExXHLJJXjDG96An//85+js7MT+/fvR2tpaz8sihBBCSIOoa6DyxS9+Eb29vbjjjjtKHzv11FPreEWEEEIIaSR1Pfr56U9/ivPOOw/veMc70NXVhXPPPRe33357PS+JEEIIIQ2kroHKoUOHsGPHDpx22ml44IEHcP311+NDH/oQ7rzzzqq3N00T6XS64g8hhBBCli8mpZT1enBd13Heeedh165dpY996EMfwhNPPIFHHnlkyu0//elP49Zbb53y8VQqhUQisajXSgghhJCFkU6nkUwma1q/67qjsnr1apx11lkVH9u8eTMOHz5c9fY333wzUqlU6c+RI0eW4jIJIYQQUid1Taa95JJL8OKLL1Z8bN++fVi/fn3V2xuGAcMwluLSCCGEENIA6rqj8tGPfhSPPvooPv/5z+PAgQP4wQ9+gH/+53/GDTfcUM/LIoQQQkiDqGugcv755+P+++/H3Xffja1bt+Izn/kMvva1r+Hqq6+u52URQgghpEHUNZn2ZM0lGYcQQgghjaFpkmkJIYQQQmZCgQohhBBCGhYFKoQQQghpWBSoEEIIIaRhUaBCCCGEkIZFgQohhBBCGhYFKoQQQghpWBSoEEIIIaRh1XXWDyGEkJkJIbGnP43RvIW2iI4tPQlwzup9WYQsGQpUCCGkQe06MIIdOw/i4FAWtiuhKQwbu2K4/vKNuHhTR70vj5AlQUc/hBDSgHYdGMEt9/dh70AaUUNFV9xA1FCxdyCDW+7vw64DI/W+REKWBAUqhBDSYISQ2LHzILKmg+5ECCFNAecMIU1Bd8JA1nSxY+dBCNG0o9oIqRkFKoQQ0mD29KdxcCiL1ogOxirzURhjaIloODiUxZ7+dJ2ukJClQ4EKIYQ0mNG8BduV0JXqL9GGwmELidG8tcRXRsjSo0CFEEIaTFtEh6YwWK6o+nnTFdA4Q1tEX+IrI2TpUaBCCCENZktPAhu7YhjL25CyMg9FSonxvI2NXTFs6UnU6QoJWToUqBBCSIPhnOH6yzciZigYTJso2C6EkCjYLgbTJmKGgusv30j9VMiKQIEKIYQ0oIs3deDzb9+GzavjyJsOhrIm8qaDzavj+Pzbty14HxUhJPqOprBz3zD6jqaooog0DGr4RgghDeriTR24aEP7onempcZypJExOfkAtImk02kkk0mkUikkEnRWSwghcxU0lsuaDlojOnSFw3IFxvI2YoayKLs3hMxl/aajH0JI06FjioVBjeVIM6CjH0JIU6FjioUzl8Zy29Ym63SVZKWjHRVCSNOg+TcLixrLkWZAgQohpCnQMcXCo8ZypBlQoEIIaQo0/2bhUWM50gwoUCGENAU6plh41FiONAMKVAghTYGOKRbHUjeWI2SuqOqHENIUgmOKvQMZdCd4xfFPcEyxeXWcjinmYakayxEyHxSoEEKaQnBMccv9fRhMm2iJaDAUDtMVGPebkzXTMYUQsqECA84ZlSCThkSBCiGkaQTHFEEflZSQ0DjD5tXxpuqjQr1gCKkdtdAnhDSdRtuNmAtqWU/I3NZv2lEhhDSdZj2mmNwLJsizCXEF3QmOwbSJHTsP4qIN7U0TeBGy2KjqhxBClgj1giFk7uoaqHz6058GY6ziz5lnnlnPSyKEkEVDvWAImbu6H/1s2bIFv/71r0t/V9W6XxIhhCyK8l4wIa5M+Tz1giFkqrpHBaqqoru7u96XQQghi456wRAyd3XPUdm/fz96enqwYcMGXH311Th8+HC9L4kQQhYFtawnZO7qWp7885//HNlsFmeccQYGBgZw66234tixY9i9ezfi8fiU25umCdM0S39Pp9Po7e2l8mRCSFOp6KPi94KhPipkJZlLeXJD9VEZHx/H+vXr8dWvfhXve9/7pnz+05/+NG699dYpH6dAhRDSbJq5FwwhJ6tpAxUAOP/883HFFVdg+/btUz5HOyqEEEJI85tLoFL3HJVy2WwWBw8exOrVq6t+3jAMJBKJij+EEEIIWb7qGqh87GMfw86dO/Hyyy9j165dePvb3w5FUfCud72rnpdFCCGEkAZR1/Lko0eP4l3vehdOnDiBzs5OXHrppXj00UfR2dlZz8sihBBCSIOoa6Byzz331PPhCSGEENLgGipHhRBCCCGkHAUqhBBCCGlYFKgQQgghpGHVfdYPIYSUo0ZohJByFKgQQhpGRWt5V0JTqLU8ISsdHf0QQhrCrgMjuOX+PuwdSCNqqOiKG4gaKvYOZHDL/X3YdWCk3pdICKkDClQIIXUnhMSOnQeRNR10J0IIaQo4ZwhpCroTBrKmix07D0KIhpr4QQhZAhSoEELqbk9/GgeHsmiN6GCsMh+FMYaWiIaDQ1ns6U/X6QoJIfVCgQohpO5G8xZsV0JXqr8kGQqHLSRG89YSXxkhpN4oUCGE1F1bRIemMFiuqPp50xXQOENbRF/iKyOE1BsFKoSQutvSk8DGrhjG8jakrMxDkVJiPG9jY1cMW3poYjohKw0FKoSQuuOc4frLNyJmKBhMmyjYLoSQKNguBtMmYoaC6y/fSP1UJhFCou9oCjv3DaPvaAqOIyr+TsnHZDmgPiqEkIZw8aYOfP7t20p9VFJCQuMMm1fHqY9KFZN7zggp4EpAYQycMepBQ5YNJifvszaRdDqNZDKJVCqFRIK2hAlZDqgz7eyCnjNZ00FrRIflCPSnCnBcCYUzrGkNQ1c4xvI2YoaCz799GwUrpKHMZf2mHRVCSEPhnGHb2mS9L6NhTe45AwADqQKEBHSVwRXAiayFUzoi6E4YGEyb2LHzIC7a0E4BH2lKlKNCCCFNZHLPmaItYDoCKmfgjEPhDKbjomgJ6kFDlgUKVAghpIlM7jnjCAEpgWCvhDFASu/jAPWgIc2PAhVCCGkik3vOqJx7wYn/eSm9YEXl3ss79aAhzY4CFUIIaSKTe86ENA5D5XCEX/kjJAxVQUjn1IOGLAsUqBBCSBOZ3HOm6Ai0Rw1wBliOt6/SHtNRtAX1oCHLAgUqhBDSZIKeM5tXx5E3HeRtF4mQimREQzKsIW+5yJsONq+OU2kyaXpUnkwIIU3o4k0duGhDe0XPmc3dcewdzFAPGrKsUKBCCCFNqlrPGepBQ5YbOvohhBBCSMOiHRVCCJkBtfQnpL4oUCGEkGlMHvxHg/4IWXp09EMIIVUEg//2DqQRNVR0xQ1EDRV7BzK45f4+7DowUu9LJGRFoECFEEImmTz4L6Qp4JwhpCnoThjImi527DwIIZp2+DwhTYMCFUIImWTy4L9yNOiPkKU170Dlu9/9Li655BL09PTglVdeAQB87Wtfw09+8pMFuzhCCKmHyYP/JqNBf4QsnXkFKjt27MBNN92EP/iDP8D4+Dhc1wUAtLS04Gtf+9pCXh8hhCy5yYP/JqNBf4QsnXkFKv/wD/+A22+/HX/zN38DRVFKHz/vvPPQ19e3YBdHCCH1MHnwXzka9EfI0ppXoPLSSy/h3HPPnfJxwzCQy+VO+qIIIaSeJg/+K9guhJAo2C4N+iNkic0rUDn11FPxzDPPTPn4L37xC2zevPlkr4kQQupu8uC/oaw546A/IST6jqawc98w+o6mqCKIkAUyr4ZvN910E2644QYUi0VIKfH444/j7rvvxvbt2/Gtb31rXhfyhS98ATfffDM+/OEPU54LIaQhVBv8V60zLTWGI2TxzCtQef/7349wOIxPfOITyOfz+LM/+zP09PTg61//Ot75znfO+f6eeOIJ3HbbbTj77LPnczmEELJoqg3+Kxc0hsuaDlojOnSFw3JFqTFctd0XQkjt5l2efPXVV2P//v3IZrMYHBzE0aNH8b73vW/O95PNZnH11Vfj9ttvR2tr63wvhxBClhw1hiNk8c07mXb//v0AgEgkgq6uLgDA/v378fLLL8/pvm644Qa85S1vwRVXXDHrbU3TRDqdrvhDCCH1Qo3hCFl88wpUrr32WuzatWvKxx977DFce+21Nd/PPffcg9/97nfYvn17Tbffvn07kslk6U9vb2/Nj0UIIQuNGsMRsvjmFag8/fTTuOSSS6Z8/KKLLqpaDVTNkSNH8OEPfxjf//73EQqFavqam2++GalUqvTnyJEjc7lsQghZUJMbw0lIFCwXmaKNguXCdF1qDEfISZpXMi1jDJlMZsrHU6lUqUvtbJ566ikMDQ3h1a9+deljruvioYcewj/+4z/CNM2KZnKA16fFMIz5XDIhhCy4oDHc3oEMYobASNaC6bjwesRJMMZwZnecGsMRchLmtaNy2WWXYfv27RVBieu62L59Oy699NKa7uO//Jf/gr6+PjzzzDOlP+eddx6uvvpqPPPMM1OCFEIIaTRBYziFA4dH8yhYDhgAzgEpAVdIDGVMPHroRL0vlZCmNa8dlS9+8Yu47LLLcMYZZ+B1r3sdAOC3v/0t0uk0/v3f/72m+4jH49i6dWvFx6LRKNrb26d8nBDSGISQs/YUWQ6PORcXbWhHV9zAaM7LQxESYADCuoKO2ETlz0Ub2hvquglpFvMKVM466yw899xz+Md//Ec8++yzCIfDeM973oMbb7wRbW1tC32NhJAGUI+mZs3QSG1PfxonshbWt0UAMDhCQOUcIY2DMQZV4aXKn5n6sRBCqmNy8sStJpJOp5FMJpFKpZBI0BkwIYtluqZmY3kbMUNZlKZm9XjM+di5bxgfu/dZdMWNqjsmQkgMZU18+R3n4PLTO+twhYQ0nrms3zXvqDz33HPYunUrOOd47rnnZrwtdZglZPmY3NQs6BcS4gq6ExyDaXPBjzbq8ZjzVV75E+JTc+tMV1DlDyEnoeZA5VWvehUGBwfR1dWFV73qVWCMTRl/DngVQbVW/hCy0jR6vkU1c2lqtlBHG/V4zPkqr/zpTvCK65VSYjxvY/NqqvwhZL5qDlReeukldHZ2lv6bEDI3zZBvUU0tTc1SC9zUrB6POV9B5c8t9/dhMG2iJaLBUDhMV2DcP6a6/vKNDR+QEtKoag5U1q9fDwCwbRu33norPvnJT+LUU09dtAsjZDmp1+C68h2clrAGABgv2HPazanH0UazHadcvKkDn3/7tlIgmhISGmfYvDre8IEoIY1uzlU/mqbhX//1X/HJT35yMa6HkGWnXvkW5Ts4OdNFwXbBGBDSFER1pebdnKU+2hBCQkiJ1qiOY+MFrGkJgbOJnZWlOE6ZzxHdxZs6cNGG9qY72iOk0c2rPPmqq67Cj3/8Y3z0ox9d6OshZNmZLt9CQqJoC+gKwwsDGfQdS+Gc3pYFeczyHRxD5SjYDlx/gm9eSMQMtebdnKU82pgcXGUtB/uOZ9EVD6ElrC3JccrJHNFxzuqeM0PIcjOvQOW0007D3/3d3+E///M/8ZrXvAbRaLTi8x/60IcW5OIIWQ6q5VtkTQfDGROm40IICQngb+7vwy1/sPmkjwnKd3BWxQ28MpqHKwFN4QADHFciVbCxvj2M42mrpt2cpTjamHw81hrRMV6wMJQxMZguIms6iOrKoh6n1OuIjhAyvXn1UZkpN4UxhkOHDp3URdWK+qiQZtB3NIUPfPdJRA0VIU1B1nRwbKwAISUUziAhIQQQM1S0RDR89qqtSIb1eR8flD+elMArozlwxsD93RwhvaOV9W1RgAF508Ftf35eTTsBi1W1JITENXc8jr0D6YrjMe9zAsfGi1jbGsbn3r4N29YkF2UnZaZrkFJiMG1i8+o47rzuAjrOIeQkLUoflXLlVT9BnDO5hJAQ4inP8ViVYBjOmBBSQlUYIAFHAGGNY01LCEfGirjx7qcR0ZR5VwaV7+DkLAdSAuX/PBkDpAAcIRDV1TlVzyzW0cZM5cicc3T4Leo5Y4sWJDRTSTQhK8m8hhICwLe//W1s3boVoVAIoVAIW7duxbe+9a2FvDZCloUgxyNmKDg2XkTRdsCZN7TOFhIKY+iMh5C3BQq2g3TBhsIZuuIGomW5JLsOjNT0eOUVMyrnXmBS9vkgcFE5b5jqmVrKke1FLkduhGsghEw1r0DlU5/6FD784Q/jrW99K+677z7cd999eOtb34qPfvSj+NSnPrXQ10hI0wtyPNa0hCEk/D/S20lpDSOqKxjOFCGkBAOgcG/nIKQp6E5MDLYTYvaT2mAHZyxvw1AZDJXDERJSSkhIuELCUBUYGsN43sbGrljdm5GVB1fVLEVA1QjXQAiZal6Byo4dO3D77bdj+/bt+MM//EP84R/+IbZv345//ud/xje/+c2FvkZCloUgWGmL6uiKG1jfFsUp7VHEDBVFW8B0ROloQ+UT/zQnHzvMpnwH53jGQiKsQWGA7QrYjgADkAxrOJ62GqYZWXlwNTltLihHXuyAqhGugRAy1bwCFdu2cd555035+Gte8xo4jnPSF0XIcrVtTRKbVydgubI0XRfw8kWk9BI6DVVBSK/8pznXY4cgKNq8Og5IIKyrUDiHqnBEDBVSSmxeHW+YKpby4GowbaJge9VQBdvFYNpckoCqEa6BEDLVvKp+PvjBD0LTNHz1q1+t+PjHPvYxFAoFfOMb31iwC5wJVf2QZjRRAuuWepKkijb6xwvgjKG3LYKYUZnnXrDdOVXnBBaiM+1Squhh4pdAL+WYASEkfvD4Ydz9+GEMpU0AaJpRB4Q0k7ms3/MOVO666y709vbioosuAgA89thjOHz4MN7znvdA07TSbScHMwuJAhWy2BaiHLfafTx66ETFgqwyoOAISCnR2xqpqTS2GQcc1qJe31d5kGQ5AmBAdyKEd16wDn92wbpl8dwS0igWPVB5wxveUNPtGGP493//97nefc0oUCGLaSGGCM50H5PbracKFj7x490VOy3lnVjLj2madcBho5qu0dtYleeeEHLyFj1QaRQUqJDFshAL13zuo5ajD1pUFxY1eiNk6S16wzdClrPZhggOpIr4+wdexEccgfaYUfVoYr6DCGcbbFevAYfLGTV6I6SxUaBCyCQzLVw5y0XectF3dBwfvfcZhLXqU4hPZvGbqfsrLaoLr5ZGb3Pp3ksIWVjz7kxLSCMQQqLvaAo79w2j72iqpoZos5lu4Qpm9FiuCwCIh9RpO8cuVpfTRu2euhg/h6XSKI3emvk5XA7o+W9ctKNCmtZiJZSWL1whrgDwchWGM0W40mt5LxmgK4rfOXbqkUu1+yg338Vvse53LiZX5aQKFm576FDTJvaWz2LqTvApOSrjeRubV8cXtdEbJUfXFz3/jY12VEhTChJK9w6kETXUec/FqaZah9Kgc6zCvfb35U3ZqnWOXawup/XunrrrwAiuueNxfOC7T+Jj9z6La+94DO+/60k8d3R8wX8OS6Xejd4W83eZzI6e/8ZHgQppOpMTSkOaMu+5ONVUW7hsV0BIwHUlOGPojBtgmFi4Jh+5LNbiV89FdfILemdMR8ESMG2BvOnCEXJBfw5LqbyTb950MJQ1kTedRe/eu9i/y2Rm9Pw3Bzr6IU1noRJKZ2osFixcwXZw3nYBKaGrCrqToSmdY6sduUy+j5Rfbrx5dbzqlnKtjc7mer8LoVq1UcFyYQsBTWUQAhjOmIgaChjYnBN7g+99JGdiPGejNaJNW1E1n2uv9XmdqeJqMVBydH3R898cKFAhdXEy3UcXokqjljPp8oVrJGfi67/ej6NjeUT1ytyQmfIYal385npGvtSLarUX9GA+kcIYGAdMx0XREgj7z0+t1TLB9/58fwrpogPh78wkQhrO6kmcVPA11+d1poqrxUAVR/VFz39zoECFLLmTTVw72YTS6RqmBWfS5Vv95QuXoXDccn8fBtNm1c6x0x25zLb4zeV65nK/C6naC7rKORgDJOD9v/CCF8D7mdSS2Bt876M5yzvGkl6QIoREqmDjuaPjMz4HM5nv87qUGiE5eiWj5785UI4KWVILkbh2MgmlJ3MmvRh5DM1yRl6thDekcRgqhyMkhJBgzAtegNoSe4PvPVO04QoJIQGNc6icQ1O9+3FciazpzPk5aJbntd7J0SsdPf/NgQIVsmQWavE4mYTSuZxJV3Pxpg7ced0FuO3Pz8OX33EObvvz83DndRfM+535yV7PbBaqN0S1F3TGGDrjISgMsF0JlXPoCsN43sKR0Tx0heEDl22Y9jgq+N4jugrLFVA5Kz0HDAwK9wKjsKbM+hxM/j77jqVmfF6TYRV7B9L47iOv1LVnRr0rjlY6ev6bAx39kCWzkIlr800oXYgz6YU8clnMM/KF7A0RvKBPPvpSOENIU8G5C01h2D+cLeWYqArDbQ8dAmes6uMF37umcEjpHR+VC46TGMOMTeyqfZ+tUR0500VrlS37rOlgKF1EwXbx1V/vQ1Sv3l14qdQjOZpMoOe/8VGgQpbMySzK1ZJva5mLM/lzjXYmPfl6JCSKloAjhHeMwuS8rmcx8jOme0E/pzeJ121qxx27XgEAJMMa4oYKW8gZHy/43oWUE7kuZZ8PghcpMe1zMN33eWy8gKzlYLxgoS1qlG4fdBd2hQBnQHtUh8JZ3fNW6lFxRCbQ89/YKFAhS2a+QcJsOwPVdjem+5oPXLah7l1Iy5V3RY0ZAiNZC6bjwjtdkWCM4czuuV3PYg4urPaCvrk7juvufAK2K7CuLVJ6PEXBjI8XfO/P96ehKxxFR0Dj3u6ahIQrJAyVo2C72Lw6MeU5mOn7XNMSwr7jWQxlTLSENXDOy7oLe3k2IU1FxC+nboSBjktdcUQq0fPfuChHhSyZ+SSuzSf5dqav+cSPd+Oy0zoa5kw6OFJROHB4NI+C5YAB4NzbSXCFxFDGxKOHTtR8n4ud9xK8oF9+eie2rU1i72BmXo8XfO/xkAqFc3AG2MLbTbIdL5hQFYaYoVb9mcz0fXLG0RUPQUjg2Lh3zJO3XBRtAUhA4byiad9CPC+EkMVBgQpZMnNNXJtP8m0tX/PQ/hF89qqtS96FtBohJCKagvI1WEgvSAnrCta1ReAKzKlCZThTRMZ0MJ63MJazIGTlsL3ZBhfONQH3ZAYlBsdJ5/QmkQip4IyVclySYQ1nr22p+JmUX9tTh8dgOWLax20Ja4gZKta2hpE3HZzIWRBSIqQpWNMantK0r14DHQkhM6vr0c+OHTuwY8cOvPzyywCALVu24FOf+hSuvPLKel4WWURzSVybT/JtrV+TDOu487oL6nomvevACLb/fC9eGMzAdieCAY0DnXEDbf73oCq85iTj2x86iP/94AFkTAcZ/2MDKaAzHkJn3MvVmCkPZz4JuCeb9zO5sd50nWknXxsApIsODK0yD6X8caO6gs+9fRs4Y3jq8Bi+8e8HkIyoCGtTX/qapWfGyTRLJKQZ1TVQWbt2Lb7whS/gtNNOg5QSd955J972trfh6aefxpYtW+p5aWQR1Zq4Np/k27l8zXzOpGtdJGa73a4DI/jovc9gOGNi0ikYbFdiKG3CUBXEDLXmyp/bHzqIL/7iRbhCgsFLTgUAVwKD6SIAoCOmT5uHU2sC7uTvbXN3fNa8nzO74xBSYue+4arPR7WfRfnjHBnN4/bfHkKu7NpM18V4wcJAqghN4YiHtCmPu3l1HNvWJME5w5aeBB7cexx7BzIIJZS65yfNB035JStRXQOVt771rRV//9znPocdO3bg0UcfpUBlmaslSJjPO/XFrOqpdZGY7XZCSHzzNwcxmrPAAGgqh+XnZATBhSMkhtJFRDujNV2z4wh84zcH4QoJXWWQYKX7DBxPF2G7LuIhbUrOR60JuEJK3PbQoSnf22WndeDIaL5q116VA6mCheu/91TNi2v5c2g5AumiAwmJNS1hhDTv5xrmKta0hHF4NI9j4wWsa2MIqcq03YKnK7GupbtwI2iGTruELIaGyVFxXRf33HMPcrkcXvva11a9jWmaSKfTFX/I8jWf5NvF6jRZLUE3YijoO5bCR+99Bt979BUIIWtK/t3Tn8aLgxlIKaEqXhv6auW5puOiYLqzdtrtO5rClx54EemCDVVh4IwDsvK+AO/+w7pSdUGr5cjs+f40/vqHz1X93r7/2GFcfeG6KXk/q5MGJICBVHHa52NyTszD+4crnsNEWIOQXvfb/vEisqZTurZ4SMPqZBicMaQKdkW+0Wev2op4SKvItanXlOST1SyddglZDHUvT+7r68NrX/taFItFxGIx3H///TjrrLOq3nb79u249dZbl/gKSb3M5x3wYrxrrrbbkDUdDGdMFG0HKQH83b89j5/39SNddGbdlXjvpafCckWpTwiDl4diOwKy4nGBkayJ1qhe9ZrLdx3GC7aXhOtKSCngColqS1bWdKt+j8GRmSskMkUbKucI6bxUFaMrDOmijbCmlEqQJSSkA0R1jvGCjZ37RvCda8/H3sEMRvMWWsIavvTACxhIFad9Prb/fC+SYQ2HhnN+d1ug4AhIKdHb6j1OpmgD8CqAXCFLU5oBoGgJKByI6ApueMMmbOiMoS2iI1Wwqu78BLs4jdwzo9qxIU35JStZ3QOVM844A8888wxSqRR++MMf4pprrsHOnTurBis333wzbrrpptLf0+k0ent7l/JyyRKbT9fIk+k0WcsiETQNE1J6ZbXce7f/7NE0CrZbsSgHyheT8ZwN3d9JCYIVxRuUA8cVKH9TfGpnDP/fm86Ycs2TjwEYA/KWCwnv2Gjicf3/kN6OiuvKqr1CjozmkS7aGMubABgYAwxVQWfcQMxQkfGnGifDWkWgVt7z5YmXR3HPk0fw7ovWAwD6jqZwaDg37eJqqBzPD2QQNxR0xkPQFY500UY6Y4IzhpzlImaopeGHAIPiT2kezVlIFxyYjlvaRfjJM/34/950BjJFG5/48e5Zj0gacUGf7tjw4o0dNOWXrFh1D1R0XcemTZsAAK95zWvwxBNP4Otf/zpuu+22Kbc1DAOGMTW7nyxv83kHPJ+vmX6RaC8tEhLeO3ohJVSFgYFBSkDAKzPOWV5ZcGtUK+1GBILFpDWi4YzuOB57yYLjCmiqt3OhMAamMDiuF71s7Unghx94LVS1cnGqtsOjqwyDqSLKioemBCkKZ1iVMKa88951YAS3P+Tln0gJqAoAMBRtF8fGCuhpCSFdsME5Q9xQJwVqDIx7uz+WK/APD+7Hho4oLt7UMWNis4TEeN4rF06G9VLeicIZOGN+czZv5yQYfliwBVT/sYbSJgB4Zd0MMBQFR0bzuPlHzyER1hal2d1imykH5cBQFkKKhumoTMhSqnugMpkQAqZp1vsySIOZT4XOXL5m9kVCesc1jveOXuGsFIhIeEGBrnIojMF0XBQtgbBeuaAEi0l7zMBfvX4j9g9lMJwxYTsCCmcA83Y8JIDOmI7/+eYzpwQpQPV8Es44OuOhUnVP6cIm/g+dMQOGqiBVdErvvIOgJ2e5WNMSRv94EY7wjmAUDjh+O/qOmAFVYbCEmBKowf/+VQ6YjigFAjMlNhct4T2PjEErC2SC3RM26XnsjIdwbKwAxxVwJcAloKoMrgAUxrEqGUJUV3B0rIDBtInetnBTHZHMnszsBaGjOQurk5U7ds1SsUTIfNU1mfbmm2/GQw89hJdffhl9fX24+eab8Zvf/AZXX311PS+LrDCzJSpajoArJcbyFmzXrRigJ6WE47d6T4ZVGCqHKwDbrcwFmZzIe/GmDvyvP30VtvQkoCocjpBwXO8oaUtPAv/rT19VqhCa3Hxtup2KzriB9ujEO2qJiZ2U7oTXR2XyO+/yoCce0rCmNYywxiGkhCu8xZ2B4a9evxFn9SQxkrVQtJ3KQK3sOWiP6aVAYKbEZtt14QrAUDlC2sT3EeyeBMmzjvAql2KGip6WiQWacW8nK6zxUvM2xhjCugLbFRCVBU8ljdrUbfYcFB0KY9BV3hAdlQlZSnXdURkaGsJ73vMeDAwMIJlM4uyzz8YDDzyA3//936/nZZEVZrZFojWqYyxnQlM4UkUHgITwp/o6QkJhDJ3xEDjnSEY0FB2BVNGBpiozJvJevKkDP7nhUvQdS+GZw+OQDDi3t6XU92O6o6g3bemedqdidTKEvOWgaAu0RDREDRUtfl5JtXfek4OemKEiqkdRtL1W9px5SbTr2qO4/vKN+Oi9zyAlAM69Y6IgJyZ4DkKqgrS/YzNTYnOq6IBzb4ej/Dln/v0cHcvDlV5yrxASpiuQNV20RTTkbYH2qA5N8YKc8q8P+0dIRdtF1Giepm619P/hnOE9r12PXQdP0JRfsqLUNVD59re/Xc+HJwRA5SIhpSwt0ir3FkJvkeB4z2tPwX8eGMETL4/Ccr18ibDmHbnEDBVSSliOxFmr40iGdRwann0x4ZzhnN4WnNPbUvHxmY6iDo/m0R7TMZAypzRYAwBNUUo7KSFNgZRA0XGrBkvVjmeCnQlAQcF2oSscbREd29Ym8cHfOw1/92/PQwgJ1z9U0hXvHb+UEqmiDZWhFAhMl9i8tSeJVMHCQMqElLLie4jqCsKaCs79WUdZs/QcvmlLN775Hwegq7yU11LOO4LiyNsu2ibdbyMfkdTa/+fSTZ34wGUbG7ZiiZDF0HA5KoQstWCRGC9YSBVsmM5E6bChciTCmr9IdOADl23ADx4/jH94cD9MR6A9piOkegt6EAjcfOXmkyp/raX5WiKkIqrzqiXYbVENV1+4EQ/tH5nyzvsDl20o9Raptats+cL+Zxeswz2Pv4IXBjPejooECkKimCqC+71gEmENqcLE0cp0ic2PHjoxbRl5W1TDZ6/aimRYr/gaAHhgz+C015sqODijO4Z00VmUpm6L1b6+fIr2bD8HmvJLVhoKVMiKt6UngfaYjj396dI78qABWzB1d0tPorRIvPui9djQES3tEqSLDlQGrG0N401bViEe0k6q8VYtPTNOZC381Rs24Re7B0qzgjSF4YxVMVy5rQe9bRFccGo7AGC8YM/YW2SmrrKTF/ZHD53AcNbySqjlRKKuhNeqX2HewvqJH++uaKBWbXGdbxn5bH1ybr5yMwDMqzx9JovZvr7Zu+Y2OpqP1NyYnJzl1kTS6TSSySRSqRQSicbayiXNQwiJt33jYS9QAUrdYqX0ql4kvGDmJzdcOqXt/J7+NB4+MIIH9gxiKF2E7UovEVVKKMyrxpnrgrZz3zA+du+z6Iob084RGsqaeO8lp+I/D4zgxcEMLNfLHmXwqnUmPy6AqkdJY/4iePWF60o7MLa/sE9u+993LIW/ub8PR8fySIRUHBufKIcOrjKkcWzojOJ42sLm1XHced0Fsy4I81lEKoKGKtc73/ud6fFmev4WqqttLd8XmRuaj9SY5rJ+U6BCVry+oyl84LtPgvlt2IMmZkHTs2RYg5QSt/35eVN2BSYvYJYrcGysAFd45bs9yTB0lde0oAUL62xTfgu2i7GcCV31Klxme9yo7h1fTe4QC3i7H4NpE5tXx3HHNRNdZcsX9uCF/oWBDE7kvGZsmsJhuS64XxUU3KWQEuvbogAD8qZT9TlbKEv1LlkIiWvueBx7B9IzPn+1BGW1Ph69+18YSxVgkrmby/pNRz9kxQuSabviOlqjGopWWTKtziEFMJQ1p5S0Ts4lAfNm2gCArjI4AjiRM3FKexTdCWPGZmPVhvCNFyysaQlPmQo8lrPgSsB2RU2PG/QW6YwbyJpORXv88t4iewczMwZiusLBAHC/O6yQ3n8rStBPRkIKwBECUV2dtlPqQi3ES5WrsdTt6ykHZWHUOmizEZv/kUoUqJAVb3LFRVDxEii6btWS1skLWMFyS83gOGNQuYTpCBRtr2nZdAva5Hd9rREOQ7MwkCri8Ggeq5NhtIS1Ur6C7k9brvVxud+IbWC84PVFmdQef7r265Nf6Iu2APf7p6gcsFyvf4rCpV/+PFF1M10ZcDNuw9dSOkzt6xsPzUdaPhpmejIhAKo2OFts8524PHkBc4SoaAbH4Oe5+N3HypuNBd/nb14Ywt8/8CIyRbui2Vxb1MC6tggUzjCSNTGUmZjy+57XrgdnrKbHzZoO0gVvqB9j8KcrT7THz5rOtEHF5Bf6kM5hqApcIf2AxUuiFVJCwut5YqgKDI1Vfc5qmSzdiMoD2WoatTfLSldLgNmIzf8aiRAS9jS/90uJdlRIw1jMd9szHTdMrbhQIYTXNCxvu2gJa1UrLibvxJSqhfygIWitr3LvhTJY0I6M5nHNHY/j4FAWBdtFumDDUJXSEL5APKRhXZuXN3PjGzbhVetaAABPHxn3789FmKvTPq7CGI5niqUurdKv1OGMgSmA40oMpYsI6wo2r07MGIhJSBQtgZihwHRc2K70WuwL736YkOCMIRnWcDxtlapUAC8HaCRn4uu/3t+U2/BzKR0mjaPW3jQUYE4I+kgVbBcF24XlCMQMFZ3x+s7Yo0CFNISZGpyVT7yd731XC4A+cNmGij4dn71qK774ixew73i29C5C5RxrW8I4NJKDLWRFkDN5AQt2HIq2C3AJR3gN4UIaLy1oq5MGbv/tIeT871NVGNIFG6br4thYHh0xA7rKS83mQqqCNHOQt118+ZcvTslh6YjpMFQvSPKa0E08LuAd+TAGhFTuvTvy5/gweMFMwXaRnCUQGy/YFUnGwZ6T8AMjzlhZczlZKgMGUArI8paLTNGGXiUgO5lt+KVIPKXS4eZEAebsygOTou36PaQar76Gqn5I3S1mVcV0AdBQpgjTEYjqSqmUtz2m43i6CMsRiOgqQpqCou2U+oZ47eWVil2eift30RLRYFepvtFUjvEq1TdgwHje9hJhpYQrvQCCM29xDJrNmbZbUeGjKxzH0wWM5LwjHQ4AzAscAEDzH9dyBQbTRaiMYW1bBAAw7H/f0n8sMOCm3z8D179+Y9Wfy+Syben/TFz/Yte1RfC//turwBkr9Wspb+ZWqoZyBI6OFwDpzTMK5vOUP9ZQ1sSX33EOLj+9s+af7WLswE0X/FDpcPOZ/O9zcoC50qp+5hKY2K7Ai4MZ7DueRapg4zNXbV3Qa6GqH1IX8313u1hJb9Nl/Tu2RN504QgJDoZT2kOwXIEXBjNwhcS6tgjiIQ1Z08FI1obwtxEcVyBi6BW7PBdtaMf7X7cBdz9+GENpb+p3MqyV+qjkbReaK7B5dRxvPGsV/veDB6ArHKN5y9tJsQXcsjycoPU9Y6zUbC6sK2CMlb6HrOkgXXTB/eBEwj/OgQSDt5uSt11I6R3bdMSMUlBQPsfHERKuK3DpNH1HNnfHK67LcgQqXtL8HZVz1rZM6S8z+XmX0gvAGGcQQmI4YyJqKKXBhnPdhl+sHbjZgp+T6ThMlt58mwouF3MJTAqWi+cH0nju6Dj6jqWwdyAD05nIT/kfbzwdLXU6JqNAhSyIk3l3Wy3pLciJCAbj2e7ck96qBUAS3iIpAWgqgy0ELFciaFnGAIxkLUQNBcOZIlwpoXFvJ8FyBSAZuhMGBlJFfPLHfZD+7SEldJWjOxnGOy9Yh3ee11vRkyRVsPCFn7+AEzkTkIDwH0tVJpJSA8Lv8Bp80LIFVpcWfFm6Ll3xpwxLic64gYimYLxgobctig9fcRraIjq+9MCLfrt76Vf8eHN8pOSlnaotPYmqP7+uRAj940W0RXSM5Ko/96+cyOMHjx/Guy9aX/V5B/NeAG3X9Y+nXCiMwXRcFC3hX8vctuEXq+y01uBnMStEqIfKwltJAWYQmBT9HJOZApNUwcbuYyk8dzSF546lsP94BmKG85UnXh7D75+1apGufGYUqJCTdrLvbicnvWVNB8MZs5QTAXjHBUdG83O6rmoBUNESpVJeBsCRslSVI6W3m1G0XRxPmyjaAgqHvxBO9AjJWRLpgo0TZYs3A6A7EpZbwLd+ewgbOqKlF8eHDwzjrkdeQd50wBmD679wSAC2O/WVwRESjAFhXYWhMozl7dILSNEWMB0B1d914QwQrjeTKGKoYJxhKF1ER9TAtrVJ/NXrZ8+tmHxME/z8Dg3nkDVtKDO8ngsJ3P7QQWxbkywd/ZzImrBdCcsVGEgVy3JbvKnTknnfTLpowXS8OUkxQ605z6OWHbgDxzP4yTP9aIvpNS1MjdBzoxlLt5vFcu1NM5fAZChdRF9ZYPLKidlfTzWFYeuaJC7Z2IFTO6ILffk1o0CFnJSFeIEvT3qLGQL940UIKaFwBjAJx/VKYG9/6CA2dERrftGulvVfKuXlE1UyQVVOEDhIAKNZy9v1EABUWUo+tRyBoYwJZ9JbDwnv+MKVXtCz/ed7SxOUh7MmXCERUjk4Y3D8rZLJOynBxxgDViVCaIloyJsuxvI2iraLqKFOKUWe/D1M7ukx29b3RRvacc0dj1f9+XXGdKSLdtV3WeXX/spoAe/7zhNgjJV2YkzHxZh/DQpn/vPNYAlRur/hjAXOgHhYw9UXrqv55zpb2antCIzkLHz2/z7vd9GdfcGvd8+NxUwmJ8tHrYGJlBJHRgt47liqdJRz3D+anklUV7BlTRJnr0ni7LVJnL4qjvaYQVU/pLkFL/BhTZmx6+lML/BBVcXN9/fh2HgBwk9EBbzyV4Vz9LSEkDXdOb2rrZb1H5TyCiH94xMFtuvCcgWEkKXFlysMwg9abEeAMyCkKRjLWxVBSnAVwUccARRsB3v600iENMRDKqQfdAVJrJj0NeX3pSpePofqN1bjzFvoUwUHYU2B4jdsc6UE8xNww5qCkF5ZAl2e6zHT1nff0dS0C7Q7zTuzatfuCIFkWIeQEq+MZJE1HUjpdcrl/v16/VYmvtfe1jAkgLzl4vuPHcaWnmRNi/FMZadZ00F/yktmjugKEiGtpgW/nk3dGmE3Z6VotqM1Kb3mjQXLRdFxUbSrByaukDg4nPV2S46msPtYCuN+/6SZtEY0bFsbBCYtOLUj6r1BbDAUqJCT8vCBYQxnTf8fT+1dTye7eFMH/uJ1G/B3//a8txALgDGJsMbRGQ8hZqhQFT6nd7XVykp11QtWCrYLBsCC6w3XKwtSAIBBgsPLJfGamsHLZ3Gm7qRMFhznhDSvg6wQfnv5Wa/XS4oVkFA5R6Zo49h4AZBAwXLw0gkvEHTcyvtyhUC26EBhDMNZCxs6oxWJsMFzUe05m26BlpBe7k2N0kUHWdP1d3eYV7oM7xhL5RKQsuKYi3MGXfW6ACfDcsbFuFqSb7WyUym9vjCO6wUpyYgGBlbTgl/Pnhv13s1ZKZrhaK3WwMRyBPYOptHnBybPD6SRt9xZ7391MoSz1yaxzd8xWdMSnvI7B6DUHsHQFIS1qf8elhoFKmTedh0YwV2PvALHb/4V/L4XLAfHxgTWtIahcFbzC3xvWwSJkIpEWIOQsvSPJfiHNJ93tVWPPhSGgj1RLQNUBhxBgzOwiaYh3s7K3Cr5R7KWl+xa4+1dAUjhJZgWbKc0v2d1MgRV4RhMFSqy8AFA5YBpC7x8Iu/1NAFwZDSP6+58ouoL8ORFvyWsVV2gg1we1W/qNhvOAZUx7wis7At0RYEjJnarGADNTwL2coOUGRfj6RaXy07rwJHRfEXuTapoo2B7+UddiVCpogiYfcGvZ88NatG/+Br1aK3WwCRrOtjTnyoFJi8ez1TNb5tsQ0e0FJRsXZOc9ghHVzlCmuL9UTnUaX4X64UCFTIvwXZ1zrTBWLCYTeRyOELM2PW0mraIDl3lUDhDtMrU4Pm+qy0/+jiRNfG1B/fj0HAGroB/5OPdLuhhoilAdyICV0qYtvC6u86j2xDngOvM7WsEvH4lI1kLCmeloYQSEieyHLbj+vftzduxxUQgxACsbQtDV5SqL8DVFv0NnTG0x3QMpMyKBXpycDHTt88AqMz7WgZvR8Xyd30SIQUxI+SXeltQlbKv4RMvhtUW45kWlyOjeVx94To8tH+kFIC6roDCGXpaKnu0zPQYgXo2daMOqourkY7Wag1MRnMW+o5NBCaHRrKzvgYpnOGMVTFsW5PEtrVJbO1JIhHWptyOMwbDbyYZ0hQYKm/o4y+AAhUyT3v603i+P4WCXfl222sI5v133pq+62k1i/muNjj66DuawlC6iFWJMAyNo2gJ5C0HQxmzdDZruV4pb9xQoXIXLOOVC3fGDYzlbJg1zL7gAILC49kW+gADkAipeOf5vfjX3x1FS1hDWFdL33vecktBiRBeBQ2Y93UK9x5P496Lz+QX4Okqe14YzEDh3teXL9DBUVjQit+e4VVS5d5OihASAn4zON9I1kLOcpEIa+AcpduFyvJqgKmLcS2Ly0P7R3DHNeeXysBHsxa+9MAL0+5MzLbg16vnBnVQXVz1PFoLApMg+bVaYCKlxECqOBGYHEvh6Fhh1vsOqRxn9SRKgcnm1YmqxzSawmFoXtfskP//zYYCFTIvIzkT6aIDEfTzgNcQrbzFOgC8+6L1Nb3AB0cSF29sx/7j3jvmiKEirClgDEgVnAV5Vzuat2A5AiFNIlv0cj5aoxrSRQdF24XCywcJet1gBYCIpqAjbkACNWXPe7N3JhZ7JqcPVhQW3N4LqOIhFQwMhhqUahe9IGXSHTAAQUzA2fTHKc8eHcffP/AiRnMWOmMGDI2XcjdWxRkOjxYQ0RW0Rrwmd8ECHdYV5EwX7gxhlncNEo5TPQdHSq+Pimm7YJzD9kurO+NG6Wim2mJc6+KydzBTWlyEkPjR00dPasGvR88NatG/uJbyaK2WwERIiZdHcqVS4b5jqZrywRIhFVvXTOSXnNYVm3JEwxjzjnFUL7+kEY9x5oMCFTIv4zkbIpiiyxgUAFzlXqAiASG9MtTVyfCs91V+JJGzXOQtB44rkS46pdLbM7pjuPnKzSf9rvbIaN6fkzMxUdhQOWKGBssRcFzh9yfxOsOmCjY4Y2iJ6GBgiBsaRrjpJ8hWUvxgA8xbfEobCzMEKYAXbHD/dpwxrGmJ+DN2LAxnLLhSVN32LU+ds4UXAEw+Thm2XPyPe5/FKydyALzZPl6ys450wcFY3hsPkDG9XaVoSMV/3daNd12wHh/47pPImdMn6AU7RdMVBzEAhuZVVTkCUCD9d3be8Z4QctrFeD6Ly0It+PXoubHSO6gupsU8WqslMHFcgf1DWTx71Nsx2d2fQqY4+5lwR0zH2WtbSoHJ+vZIKacuoHBW2ikJjnGqJcfOV6NUSVGgQualNaKB+4uN5NIrR/arfiSTcB3vH1FrZOoZabnyPARDVZA3vV0azrx3B8mwCld6VSUna9eBEdz+20NeBY4MSqAZCraA5VhojWoYzVmQQmIo4yWy9iTDWNNi4HjGhpQSIZ0jrKkoWA4gK4OFoJ29xhnWtoQxnLWQM52ajn2CQKQlouEtW7vxnV0vYXd/qtSmfjZeSTOvOE4ZK1jImg4cr4QKqj8UqGA5eGlk6vPJGJArOrjvyaN4eSSHwRl2jsqPs6Y72uIMOLUjDMsB8pYD25X40H/ZhF8+f3zWxXi+i0szL/gLsZvTKAtLI1nIo7XJgYlpC2/ERpmiHbSi93ZL9vanUawhI723NVwqFd62Njll7hkwcYzjJb0q0NXF2y1ppCopClTIvLTHDCRCGlIFu6LqR0qvpp8xhkRIw1jexs59w1VfNMvzEFYlDLxyouC3tveSGWzhvSisb4vgeMbCjp0HccEpbRWt6Wt9IZ5I/nWwpiWMfr8kWeFe5YztCJzImjBUDoehtJNwcDiLsK5AU3jpXXp7TMfRUQeT9xqClyvblRhIFbC6JYxEWMVQ2pxS/jydrOngvXc9gZdHciilwtSYyJsMa6XjFCEEhjMmOPOCn8G0WZp2PF26SdC635XAoy+NVXyu/BmWqAxSgtyeyU3wwBgsBwjr3ju9oayJde1R3HndBbMupiezuDRzy/ST2c1ppIWlkZzMTlstgUm6YGN3/8Qxzr7j2Yr5XVWviQEbO2OlwGTrmiTaopVBN2PeYNJgpySkKUvW46TRqqRoejKZl2Di8XNHx+H47dKDLqnBdr2mcoRVDkeg4kUzWESeOjyGb/z7ASQjKiAZXhnNgbPKBmFCSqxviwIMGMuZ6G2LYihdrPpCPNO7yb6jKXzgu08ianhTkYPcj6It/CTQqRS/r4njejs8vW0R5EyvOVy2aGO26kCVM6xpDSNbdCra7c8mqnMkwzoG07VXGzEAa1vDSIQ0mK7ASMZEumhDUxhcIWsqMa7lMYLtk+CyWiMairaA5YhSg7igSZ2UwJrWMDTOSzsq37rmPJzT21LT402efKtzhrTpIF1wEDUUfOlPzsalp9U2aXm5m25hGVuhU4KrqWX6dXlgEnSAnRyYDGfMivySl0Zysz62pjCc2R33j3FasKUngeikyjSFs9JOSXBEupDHOLVazGn25Wh6Mll05e9SsqaDNk0v7aikizZyptfPIhbSKqLxj977DLriBk5kLeRMFxnTRt5yvBJc6bW2DzBMJLZKCYzlbdhuFqsSoSkRfnmparUgpnrOA5uxz4kr4DdfY3CExNGxAhIhBa6QVYOU8rb2gJdk2j9eKLVxN1SO7Aw5HwGvtFfWFKQEOyAR3buuoawJjXvJpumit9ulKhyMyZr6LswkKFUul/M70AITR0DBHCJHSgylTdiuC1d429ZfeuAF/NXrN1UsmtMFmOXHOM/3p7zkbT8vSlMYbnvoEDhjK34BbqTy20Y23U6b5QqM562qgYmU3r/78sAk6G80k4iuYEtPotRc7czuxJRjGk0Jepd4/681SNJrIzYgpECFzNvkfIDgXQpjDBFdwbq2SMWLZswQODyax2jOwvq2CEKagpzlVdtYriglZpYWfEyUx/anvReHzpiBkF+CF7wQHx4t4Cu/2oeoriCiq9AUDlcKPHd0HB+99xl88PdOw7Y1yVLOg2NLHBsrwBVi2kTQgARKpbmOkNAUBZoipwQc5f+egwU7GVIh/ATZiK6U8l5mY7sSI5nZK4uAiaqfd5y3Fn/86l6M5i20hDX87U/24DDyUBRW2qWSUkw9npmjyc+X5UroCvN3buAPI5Rg/p6LKbxutZrC0BnX8cJgtmLreLbjios3dUBIib/+4XMIaxLJsDeWwHZlKUj97FVbkQzrTXfMs1AacWFpVJwznLYqVtoxOTyarwhMXCFxaDhbEZiM5WdvRd8S9lvR+4HJxs5YxTENY6xUGhzye5g06u9oIzYgpECFnJTJ71JGsxb+/hd7EQtplVuGfkv2sn+6iOhe59mC7UL4CRReMABAeoFBWOP+dqxXrRI2piZW2q6AaQswwH/XPTFXJlVwcOu/7cFpXTGEdQWjOW8qspASisIg5tht1nQF8lV2RYIAq3whV/jEvKBUwZ7IOamBLbwjlMnl3tUoHPiPF4fxxrO6cfnpneg7msLxdAEhVYHpCnDu5Qwp/s7QQrNcCRV+Z1ru/dyCR1H9naRgDEKwdbxj50EIKfGJH++e8Rz8og3tuO2hQ7BdURH4KhylIPXGu59GRFNKO0ZdCQPvumAd/uyCdTXnLzVjPkugEReWRlL0c0u8qpzKHRPLEXhxMOMHJuPY059GroZW9N2JUEXia29rZSv68hb0hlq/Y5z5aMQGhBSokJNWngC4c98wHIEpL5pBS3bFnwPjCAHGFHTGQ97uhvTK+jibaFWvcIZEWMNIzgaDtwCxSYcPXn6EW2rd7pUFVy7Gtivx/EAGnHm7G64/9FBWKTGeTbZgT/s1k3cbxnI2wLzZR5bjQlXYnI5fhPSOUaZLxOV+6fbkgY2jeQuO8BrUDaSKsIX0K35qf2zFf9xaOa6EYNIvl/RmHLXHdLSE9YoxCOXv8L/8y32zHldEDXXa3YKc5aJgO3D9sQh5y4XpuBjJmvjbn+7BvzxxeNaS9uWQgNqIC0s9zRSY5C1vYGgwvO+FwXRN/yZPaY/4gUkLzl47tRV9o7egn4tGbEBIgQpZUNO9aAZ5JoxXtk+PGSrWtIYxlC6Wenw4QkJKr1oEEtjQGcWR0XzVd4y265aOP9SyHYPJJbMqC4YLylJ31PkQ8I4xhCtnPTbypwqgYPtt72XtXWoDrl9GXe3F1FAVtEa98u+wNjGwMfgZ6CrHmtYwhjPF0uRmXlb1EwxdnE6QiDvTU1X+/QgJdMcNKAw4Nl5EVFe9n+Hk61Y4TtguDp/IoT1mzHhc8czh8epDE6XEcKboLULSDwrhTdpWuITjSrwwmMHNP3oO2//o7KpBR6NVNsxXIy4sS2mmwGQsP9GKvu9YCgeGZm9Fzxlw+qp4xYycZFkres5YRSVOM7Sgn4tGbEBIgQpZUNO9aHqBiYTregFISJtYeGKGCp4MIVWw8cE3nIZXrWsBAIwX7NK03OvufKLqC3H5u37GGOQ0wQDjDIq/m+L1UOFYFdcxnLVhOe6sFTyAt7BrCveTYyWsGkppND948nJdvPk/cg5HQFJOTGP2dlBYqYqKc68CwXtd9o53Hj4wjA9ctrHsZ2Ag2h5F0RZwhNfQ7uh40d9dAji86hyFAyFNQcFy/UDRS1qtiGwwtcHb5F4qYzkb7TEdDJhSLREwXVHa2ZrtuEL6+S1ThibawttBYwwOvKBRU5m/48agKl7FWKrgVE0kXU4JqI24sCwm03FRtKYGJlJKHE+beK4sMDk8mp/1/gyVY/PqBM72A5PNPZWt6Mt7l3jHOM3Xgn6uGq0fEQUqZEFN96IJ5i2kQkp0THoXLaVEqmBjbWsE6zq87ouT8wSmeyFOFbzGZRxlLeurXJcQslRRpCkctiugKQq6kwqOjeUr5tNUw/zvzVuQZWn43nQ5HwxeebbCGDiXpYnCUkzfIC247uk+J6R3xML9YxmvDwwD416Fkisk7nrkFZyztmXq86VywPX6tIQ0Dl3h6IwZ3o6Nf54OAIdHC5BSImc5MMvydybFK1MEnzIdF9mig3hY82c9yarv8HvbIjieKsx6XHFub0vVwDfYoQt2xlSFVRwLBhVjYV2pmki63BJQG21hWUjTBSZCSrxyIl+xYzJUQxJ6zFCxdU0QmLTgtFWxUsVNeQv6IDBp5mOck9FI/YgoUCELbroXzTO74xjKmMiaLlSFl4KN4GjiyGgO/999z1XNE5juPjd2xXBoOIu8NbErUm09dSXgul6AkYioSBUEhrMWuhIGVifDGEwXS8GEN0GZQ1cYJBjCmtcOfzxvw/GPQsoXbU3xeq0E653CvcTVYOEMKpcArxS6PapD5QxDabPi6GXydQfBgcq9nSLXT6xV/MAkWJyl9K4prCmwHIEdOw/izusumGbhSuCy0zrw/ccOI1V0SkFf0fHefbdFNbzr/LX4yq/3w3K83JYgr0jUsO0kJWBoHO+/9FR8/7HD077D/9gbT8dtDx2a9bhi25pk1SDV+zl4z3nQEbniOvznPawpyJjOlETS5ZiA2kgLy8mYLjAJWtGXBya1dKxuj+le0quf+HpqR7TUq2mxW9A3u3qMk6iGAhUCYOErH6Z70Xz00ImKxVP43Wd1haMtakzJEwhKT09kTYzlbVx7ySlI5x20RjS0x4zSsdBzR8dRsNwp3WInCypwooaKDZ1+8zgh0RbREDVUOEIia3ovfrrCSwGTkBJ/+b2nKsqSg8ZmQbKr6u8YKazy3b03bNDr5nsia0EICdcfD5AqOjN2ig35eSauf12jOcsLIBQv6UZAwhHeY3bGDThCYs+xFH7yTD/eevZqRA0Vvzs8hsFUEasTIZy7vhXb1iSxpSdZ9d33By7bgNseOoSQqgDSLQVHkxNyptv9UTnDB3/vNLz7ovUVj3HCdsEZQ29bBB974+m49LROcMZqOq64aEM73v+6Dbjn8cMY9MvUNT/R2nG93hdSTgQrUspSxRhjqJpIulwTUBtlYZmLIDApOl5gEhznFm0XewfSpcBkz0AaRXv2c9O1rWEvKPGPclYnJ472lrIFPVk4dQ1Utm/fjh/96Ed44YUXEA6HcfHFF+OLX/wizjjjjHpe1oqzWJUP1V40ywOYE1kTX3twP46M5rA6GZ6SJxCUniqMIV2cGIKYCKk4q8d7p62qHJed1oHHDp2AVcM7fsXfpeCc4d6/uAgvDmUrAikAVQM2ISROaY/i+YG0dz+cgfutWoU/GtkbHeAlwCrwc2bgHdGENAVRXYET1vDHr16Lgu3i2SPj2NOfqjoVuZSgCu+dZNDULWt6E4ghAcffUQhr3lDFkawJ0xZwpMSnfrobt/5sD4QQKNgCrpDgjCFqqNi2Jom/ev3Gqq3sgyORVYkQHOGNAjBtMSUgme6IrbfNWySEkKUeKF/+5T4cPpGDKySOpwoVjdpmO66Y/LvJwErlx6e0R/A3P96N/vECHFeUZjcFgVtHzECq4FRNJF3pCaj1NF1gkina2H0sXephsu94ZtZyeoaJVvRBYBK0oq9nC3qysOraQv/Nb34z3vnOd+L888+H4zi45ZZbsHv3bjz//POIRqOzfj210D955ZUPLRENQnjvZPK2i2RYw/Z5Vj7UskNT3tbeUHkp4VPlHI4QODZeKM0Rkn5w4Q0sZAhrKtqiGq6+cB2+9+grODJamLGCpZzCvQZN37nuwlIgFVxvsHPTEtXQETVK1x1cK2PejkxQRcP8XRXbFRV9UoIcFgmvSiAYeMgZQ0hVkLWcUsIpZ6i5xT2Dt5PTFtURNdTSc9U/XoTr35cXlEx/nwoHOmIGvvKOc6Y0SvvtgRF87N5n0RU3kLddHB3Nw/UTlGtJOA5rHK0RHRu7YqUjptnauk/3u1JLW3ghJf72p3vw0kjOTwr2FqdkRIPlyBnbx09u0T95R6dZqn4a3XSByUjWRN/RlJf8eiyFl4Zzs1bEqf4RchCYbO1JIhby3m83Sgt6Upu5rN8NNetneHgYXV1d2LlzJy677LJZb0+Byskpn+kQM1SMZC2YjltRRXJmdxw/ueHSOR0DzbZDEyxMO/cN4Vu/fQmJkIrRvFWx+Av/OEX4JbW6ykv5GLaQCPlNlAQA23GRs2ovpQmpHLGQiq/86atw+emdpet9vj+NdNEu7T6ENY6NXXF87I2nw5UoLeCMoRRUZWaZ4xNSOWKGWsp16E541U3e2ftEy3kha2uZD0w0gutOhqArDEMZC5brliqCAAD+/ZVX5QCVf48aChIhreJn9KYt3fjmfxxARFcwkCqgYAsojEEyCWf2PljgAAxNga6y0pFeeaM279JmnxdSy7yR1UkDybCX9Jopuig6bikvJWaoNe0K1jL/pREsVlO6xbhf05mYkxMEJlJKHBsvVAQm/eOzd2pmAOIhFRdvbMebtnTjzO44DL8iR1d5RX5Jo7SgJ7Vp2lk/qVQKANDW1lb186ZpwjQnsrrT6fSSXNdyFWzzG6qC/nGvJ0VQRSIlg+MKPD+QwQ8eP4x3X7S+pvuc/C5Y4wwZ08GzR1L4H/c9i+suXo/fHjiBg0NZFGwXqYKN8YINDkBV/RJiWTlLpzIxlUHlgOUKRA215lbzAEolubYrASnRFtFL1zuaM5EzJxJyhZTImN7xzPvvehLvumDdRE6DpiCsK8gUxazDBh3hzRHhjGFtawgqVzCcNUuVBKYzv7b2EpgycyQoMw6OtqpVMgXHShJA1nQR0VV0xnTYQmLvQBoHhrIwVI6j44VSPsB0ZcbTXZflCtiuhCu88ucp11BDVc1sVTmGyvH8QAZxw2sa2BrRkS7aGMvbUBjwh6/qwYUb2hEPaaUjw2qaIQF1sY5mF+p+qwUmrpB4eSSHZ/2k175jKYzWMJgzyPuKGSqiugLOvNePvmMpvOXs1ehOhr0ckwZuQU8WXsMEKkIIfOQjH8Ell1yCrVu3Vr3N9u3bceutty7xlS1fQeVD3rIh/MZi5ZUqqsJguRL3PH64pnbkk3tT5CzXy3Hwd0oyRRtf+MWLiBkq4iHN270JvhYoVZlMNvlDQempnGbq8bTXV6rWkSg4AmN5E7f/9iWM5ixki27V+5Lwdk++/9grOK0zhuMZC90J74r6U4VZH9P1u98q8HYBIroy0W5/0ka3Xxg06/b3dHGNlBKGqnpJxZOCi+nu80TWRN5yEDM0FCwXo7Y142PMJPjtULlXBRUELUVbTGn8NltVzUxVORIS43kLQkokw/pELo3jTcLOWcBtOw/h7seOIGoosy6+jZyAulhN6U7mfqsFJrbrtaIP5uPs7k8hV8MAzq64UWqq9svnj6N/LI/OuAHOvERozhhiIRVDGQv3PnkUb9nWQwHKCtQwgcoNN9yA3bt34+GHH572NjfffDNuuumm0t/T6TR6e3uX4vKWpaCiwWttz6e0pwcYFAYMpos19ZMofxecs1y/Nb43fRhMwhFegJGzHOQtF9VOHavtLghUBitB6anjf/1sHVarYQD+57/2IWc6yJrOrF9vORKHRnKIh1QMpk2EVAarhjlBwS1cCbi2mKhaKCtZLr/xdPc4Xe+VyY8VVCzVijGgYLnImi44Q825KNWuL7gGLxBj/vGTt4iFURmozFZVM1NVTmkcA2OwhcBIyvLyaBgqStRzloNYSMHz/Wn8j/uexXteux6XbupsuB2T6SxWU7q53q/lTJQKB4FJwXKxpz9Vaq62dzBTUwPE9W0Rb3Cfn2OyKhECALw0nMPdjx1Ge9SAoSqTdtGar68NWVgNEajceOON+NnPfoaHHnoIa9eunfZ2hmHAMIxpP0/mZktPAl0JAyNZEwqvrOMISjxD/hbHTP0kynNO8paLZEjFQMZL7gymKQsJMH8PwfV7yys1vrZ6jc28ig8hBRxXQlM4TNuFX3gDVsNORLn2qI7RnI2s6dT8dd7OALCmxcArJ2bveDkTx5WQvLZdj9k+dzIUzksLzEnNKyyLpOyyqdRCAsfTRXB/Ox+orapmS08CGzpj2N2fQjKkQlMUhHQvmLZdF64AIjpHKm/5wfBEB9/gUoSUOJGzwAGM5QW++qt9+O4jrzRkDko1i9WUbrb7TYZV7D+ewW/3j+CUjghcIZHK2141zrFx9B1NY/9QpqZW9Kd1xUsThbetSSIZ0aq2oD8yVvDK8bXJQYqnGfvakIVT10BFSokPfvCDuP/++/Gb3/wGp556aj0vZ8XhnOFdF6zD3/50DxxXQlUm2s8HJZ7JiAZITPvOt/ycu2C7yBS9RFFvEB4rvehUmwI80zt3lZdVrUjAdoS3i+J/zHWEtwPAapswPNmJnIWIpmAOKS7eO3ZXIBnW8afnteFbD788x0etNJdpyo2uoq3+pB9G0RE4OpZHTzIMTeU1tXV/9NAJpAoWMkUHqbwNhXuzjVoiOnKWA84ZIrqC8YLt7dgBpfEJwER1VNEWpbwH6edgNcssn7k0pZtLUmxwv5rCULBc2K4Lzjh0zRunwODNp/r57n5kTRd9R1N4pYZW9LrKsbl7IjDZ0pNEWFdqakG/XPvakIVR10DlhhtuwA9+8AP85Cc/QTwex+DgIAAgmUwiHA7X89JWjD+7YB3+5YnDeGEw4w3sk0FHT46OmIFM0UFvWwQn/FLC8hfAyefcLRENRX84GBAkr07kvMwFw8Q747CuoGi7pSCFw0sa9QKq+X3fecstDUas9XqCac6HhrM475TW+T1wDY+zlGV4QS7JYvEmPHm7Hf2pAjqi+qxt3ct/r7oTBsbzXjl43nZRTBexuTsOxoBXThQmqsTkRG8XryR8IhBUmNcp2HG9n2F3wmiKWT61Lt6vnMjhf/3K61XjdSjm2LRq+uc4bqhwhMCh4RwcISDERJm9qnCYjtd3554njs54fVFDwdaeZCkwOX1V3K/4mnsLeuprQ2ZS10Blx44dAIDXv/71FR+/4447cO211y79Ba1AnDPcfOVm3Pyj55AqOAjrCsKaAsaAYb/s9choHn/9w8rW9hdtaK96zt2dDOHIiRwc6S1OCpOlHZq5KEvlgKIwhOC1h/f6g0jU0KByRkICmYJd8+2DMuJ4SMVw1ppz4DWXx1lKk5NuF1r5j0lI4KpXr8Vfv/GMaYODyfkTABBSFeRtF5ASecvrefKXl2/EX//wOWRNG26QE4OJYMXrbePnMHFWCmhUzqc9NlmsEuD5qmXxjocUfP7/7YXlCDDGwAFYDsezR1KlXaPzTmnzephYXhLsvuNpZEwbjlsWGEtvxITlTp8A2xbVKzq+ntoRnVIiPN/eJSttsCKZm4bqozJX1Edl4UzuJyGEQM5yYagcXfHQlGZb73/dBnzzPw4gaqgIaZXv9jJFG4dH86UeKApnUDmH6bhzyoMIKoDaYwaG0mbFO+aFMpdEXJUzrEoYyJouYoZX0t20/3iWUPnPrCum42vvPHfa3ZTyJoCOkKU5UOWBRkTn+M51FyJVsHDj3U8jXbBLQxsBr0160G+Hw5uq7Aov/+GUjoiX6yQkhrImvvyOcyp66Sx0CfDJmqkpHWdesGK7EprKvEnYAGxXQGGAoak4c3Uct771LOw7nsVzfsfXpw+P1fTvsKcl5AUl/oycNS1h6KriBSR+ifBCt6Bvlr425OQ1bcO3uaJAZWEF7yhHcia+/uv9ODqWn7bZVnfCwPG0ia644b9jlRWdZS3HwdHxIkKagvaoDsaAY2OFUlVILb90QaO31og+pWfIQulKGBjNWjW16gaWfsejUXE/+pjrxlZYU/Ca9S24670XVn13vHPfMD5277N+w7liqWpsInfKC1r++k1n4vrXb8TD+4fx1z98DnnTga5xjOe8UnsvmdY7ImRg4IxhTWu4lNBbsF3kTQe3/fl5yBTtWTvg1jtYmbx4b+iMYiBVxEsjOSjMS4qG/xwJIeAI+Dlc3nNc644mZ16Twk/91y24cGN7KeE1pHk7J0vRgr7RdrbI4mjahm+kvoJ+En1HUxhKF2esNhhMF8HgnZ87drV3vgwhP8hIFbypwxL+jBwAVg25EUICliNwPL04QUpMV5AMaYhoCvpTxRnLK8uvlQHQFW+i8nyatTUzL0HaCzZFLU1fJjEdF4+/NIovP/AiLtzYPmUhaovoUDkwnDErqsYA/0iHMThS4oE9g/jAZRtw6Wmd+Mo7zikt5BFD9YcUSrh+zlVI4+hKhKpWHQVDLRe6BHghTW5KF/e/xxu+/zs/Icf7PQymaJeXxE/JbC4TUjnCugKVcagKoKsKdIVhtGCjPW7glPbIvI5xTlYj97Uh9UGBCpmilmoDwNuNODKaR95yS11tFe4lMRb8JJL8eGVTNOHnDQS3m42q8Jr6M8yVwhnWt0dwZKwIVwgIIeZ0rFRLoLVUgoTVxb6e4Lch6IDLJCv9PGslpPfc7dh5EN9/7HBFQ7aLNrRDSImw7vWqURWAsYnfQQlvITZUBcdTBfzkmX60xXS0RXTccc352DuYwWjeQktYAwDsOngCdz3ysncU4g+WnJzzsHcwU1MJcN+xFDhjC/Yufy67BrbrJaivShpIhFQcHsvjp8/0I2t5/X+E6z07MwlpHFtWJ9DTEsZv9w0jHtYQ0dVSU7Vg96VguzAUPmUnlZB6okCFTBG8q00X7VJ+SUjjpWnA6aINKYEN7RHsHUiXzrulv2jVsnTVWpq7WCeTCmPoTxWRM20I6XXhVbisqYqoUQKUwFJVOUdCCmzHG77ouHJKeflcAj0Jb3elM65j70AGH733GXTFDZzIWkgVbD/XAoAUUBQvGTaYwRQPqxjJWfjs/30enLGKfJLLT+8sPcY5vS04Z21yxunMO/cNzxqUD1su/ub+PozmrAXJX5ktHyYITIq2i7zpYv9QBn1+x9fnjqVwIlt7L5HOuIG/fetZOHNVHNGQCl3h+ODdT+PFwQySYY2qa0hToBwVMsXD+4dLSYqceVv9hsoRMzRkijYKtjf8TYqlWyQXA8NEKbblevNJVthJzrxofgtbez4tbCdZ2xKCwhmOjBWgcIZViRAcV2AobZZ+t4KEbEP1hg2eyJlwhcSaljASIW3WfJKZdi/Kk3cnJ4UDwGjOwmC6WJopdLL5K9Va15uOi9G8jYiu4MO/twkhXSkN79vTn0amWFu3YW93xGt+6EjAUBn+9zvPxevP7KroXUJTo0kjoGRaMm/Bi9hY3kLO9M76OWcVi7jK4VfxiNI7aM1vM7sQi9dS60mGAAYcT5ulEfRkZirzFsOTFTRmK58kDXi7J376BXSNY00yjJDO8fKId9QY0RWc2hktjX2oZSJzNRNTmjPoThgVOwxCCuw7ngUAnN4VAy/ruzOfxwse6/n+FLriIb9Ls0TBHymRLjql73s269oi6EmG8OLxDEzH9Xe5RClR3dA4/sfvn46/uGxj1a+n6hpSb5RMS2YlhETfsRSeOTwOyYBze1uwZXWi1MOitzWCnOViOGNWlBVzBiRCGsbydsULqu1KNGtivjdCgFc0mSMzKw9SFDa/+UCA91xXfq0/wZt5fVAEvK7EEkCq4KBgu1A4Q1ciVDGbqjyfpDx3ZbZckpn6d4xkTQgJdCeMiiBl8uPN1sLedr0Bfk+/Mo69A16uy2Cq6B3v1HDWyBmwsTNWmpFzzpoWrG4JI6RxPH14DN9++CUcGs6hYLvgjKG3LYKPvfF0XHqadwxWbUepGaZGExKgQGUF2nVgBNt/vhf7jmdh+8kiKudY1xbGWN5GW9RLLIwZKqKGgvG8jYFU0Z/VwzBesKsu5s26GWG5Epih0RWZXnn/koXgCG9Gj8o5dL8rqyu9YFLlXofZnpaJMuNytiswnDXxmZ/tgcI5NMUr433z1tXobYtUXYyFkIiHNPy389fhgT2DGEoXS7ksa1rCODpaQEu4etv26ebPBIFJ3nTxm33DePrwGPrHC3hxMIORbG1NBjWFQWEMUUPBX7/pDPze5lVVW9C/4cxVuPz0rmkDjtnyYai6hjQDClRWmF0HRvDRe5/BcMYEg7/V7s+wOTCc80uLASn10hC4oI8FZ/6iTkiZhf6NENJb7DXFCzZcIfHOC9Zhc3cCX3rghaqJr1nTwbGxAoSUiBoqEiEN4wULj700ikcOjXpBt65ULNKTF3GVA6uSYbxpyypcuqkTQkpc/72nZm1hnwx5uVt5y8GB4zk8dXgMO/cNoe9oGtY8BzrZrkRLTIOQwP/tG8Sfnrdu2t2O6cp5q+XDWK5omllHhAQoUFlBhJD45m8OYjRngQHQVD5xxs9Eqe/E8YyF0bwNQ1XQGTegcg4JCYs2HcgkixW2Sng5F/ATaV+7sR2Xn9aJHz19dEpLeQmJoXQRrpCI6AqSYc0/trQg/KQNxxWIGHppkb76wnX4/mOHpyziR8cK+JcnjuCctS24aEN71Rb2UnqJ1ycyJla3hPDL5wfR96sUdh9LYSw/+44JAxAxFFi2gD3DdtRI1kJPS2heE5InjyJoxP4whNRqYfsfk4YkhETf0RTuevQV7O5PQQoJVZkIUlwhpzQuE0Iibzk4MppHpmhBNHN5D6lJoy1XAkFOlIqOqFHKJ4kZCgbTJvKWg5zpYDBVRN5yoXCgy58PNJwp+g3jvKF4lisA6Q0kzBQdfOM3E4u4oXmJ4bYrkAypyJoOduw8CAC4/vKNiGgMR0bzGEwVcDxVwJHRPPYPZTFesPH8QAbf/M1B/Hb/yLRBisYZEiEVXXEdEU2BpgDwW/zPRMJrfGe7U4+XZrOnP11Tf5g9/ek53S8h9UA7Kstc+fZ2znSRNr0eKNwfnCOl9NqST/q64IRHSInjmbm9SJLmEDRBUzhgaAqimgpDBY6lvHyQeh/zeR2AFZzVkyz19bh4Uwc+//Zt+Pz/ex4vDGYrqmSCadhFW8B0hN9F10uPlsJrv8+YgrCuYGC8gJ6WcEXCeNBVWWEMu4+l8Kvnj+N3h0eRNb2KnFqfDYUzhDUFsZCCqO71LgnK/BNhgaF0AXmrtsjfaywo0RapnicznVqaNlbLryGkEVGgsoxNPqMOaQqypgMX0kuiZV6lS60F6q0RDeP56om0pLkwoFSK7QjAMV3kTBccXmlrb1sEB4aydU+QTkY0XH+5V2LbdzSF0byF37w4hP1DObhSer1D4AXWliNwbKyA1qhWCjoAVAw0BLxARACwHNcvSRd+pZFXgl90JYqOwAe+99Ss16dwhtNXxbBtTRLn9rZCQuIrv9yHrrgBtUqQoHOGgi2gqwyuVVspciKkzbkBW1tEh+YnI8+UXzPXAIiQeqBAZZmqdkYtpURI515/FHjn9gpnU14sGbzFKugG6giv9Nh2BTpjGoZqrFwgjUVTGNqjOgb9SdTVCHjjDwZTRUR07xiknq67eD0A4Jo7Hi/tCqaK3u+fyr1EbwEJ1/FKmR0hkC44gF+hBnj5JCFNQUj3AgdHCEB6zdwc4QUxdo0jERi8dvRSAuvbI7j9z89De9yAoXpHTH1HUzBUDkdIqFPjA6RNB0JItCVCGBJmTeMhLj2tY855JFt6ElXzawDqQEuaD+WoLFPVzqgZY+iKh0pNtbzqiqkvz5yhLCfF+zwDkLdcjOQoSGlWrpA4njZrum2m6KC3JQRVqV/mSljj+LfnBnDz/X3YO5BGRFdglZWRu8ILThTGSw0HvUGWLlTO4bgCtuPNcGqLaMgVHRxPFTGU8Z4DW6A0ZXm6IIUBiOoKOmI61rdFcEZ3DBs6Y1jTGkam6CBVdBA11NLuSRAgjOXtKeMfpJRIFxxwP2elIzr7bobKGf741Wvn+MxhSj5PwXYhhETBdjGYNkuzjiiRljQDClSWqenOqGOGit62CPQZFiBXApbrnfMHb/hc6b2g1/sogJycucziOZG3az8XXEAM3tDD1qiOFwYzGMmaSIY0SEyUxweN+RxXQMLru6IqXnq4d5OJScKMMxwdL+ClE3kMZc1Zd08YgKjfTr+nxcApHVGsToaRCGvQFAWcMYRUBXaVHI/ZAoSooSAR0mC7Em0xHbo6/UswA7B5dRzb1syv10mQz7N5dRx508FQ1kTedLB5dZxKk0lToaOfZWqmM+qo4b3YMki0RzUIAOM5u6nn9pDZzTXIzFtOzcMjF5KEVylzwg8qXNfFYSfvHVOWBU5BfpUQEgwSzP+cwhgcf7dE+rkrM2Fl/68pQDKiA2B+p1cvEXaymXI8ggCh2jDED1y2Abc9dKjUsn9NSxhHRvNTqu5UDrTHDNx85eaT2vWgDrRkOaBAZZma6Yy6YLqwXIGwpqA7GQbgHesUbQpVasXR3AMZa1Gw3LolThcdWQogFIWBMwbbEROTustuO3mHxJXVz3IYgI64AQaJoi2QMx240svd0VQOx5UQQmI0Z0P4M65SBRu6wuH63XJDOgckZs3xmClA4IxVtOxf0xrGULqIoi3AmLfrefbaJP7q9ZsWZNdjuoZwhDQLClSWqdlmmADeCHjGGAqWC1dIqJxNeWdHqlvuQQow//k9C0WW/9cM1zLdpzSFYW1rBEXbRcHyBv6dyJrerKC4gZCmYDhjwnJlRe6Ld/TkJepmig4yRcebSswATVGgqwytEX3WHI/pAoTJOy62kGiN6OhKhPD7Z61CTzKM1oiGeEiDEJJ2P8iKR4HKMjbdFvSpnTEcGc2VzsdtV/jJsxSkkIVhqN6snpzpnnRQZ7tArb+bva1hXLl1NVYlDKQKNu598ggcIdERNzAwXvRnE82SVOw3mcv4vVP8KROQYF6/FXBcfeG6k9rtqLbjkipYuO2hQ9PO5SFkpWJycmp6E5nLmOiVbPL01M3dcVz7ncex+1gausoxnrfq3tyLLC8qZ/jrN52Bh/YN4ZFDo4uWhM2Zl8/SFjXw/tedgjO6E7jtoUM4cDyDkZwFV0iENQXJiIbhjOnlm0gJ0/9915QgEIL/d4bykyOFe3kuq+JeBZTCvKGcZ/UkcOd1F8y421FtavF0t59uLs9Y3kbMUCj5lSw7c1m/aUdlGZnuhXHyFvSuAyNIFWykizZV8ZBFISHx2/0juPO6C3HPk0fw5QdewHhh4XqynNYZwendcew+lkGqaMMRAt/8zSHkLAe6wpEMa4D0jnBMR2AobUJKQFFR6q/iXWjZfwPeWAkm4fg7GhwMjpRQFYZ4SPNuw9ms83dmm1pcjubyEDIzClSWiVpfGIN3bpmi3XCzXcjyISXw4mAGewcz+K9nr8Yzh0fxw9/1n9R9cm8zBApn6E+ZODiS9/8OGKoCRwhYjpcQG9IUCOklPSucwXG9RFwpWUXFtT9JovT/rCxu8eriKrvaArO3n5/r1OK5zOWhpFiyElGgsgzU+sJY/s5NU3jdkyXJ8iUkMJY3cf33n0L/eGFOO3ecTVNKLYNgRSLnj/JWOKBwjqIj/IRwrxHcSNaEkF5CMBOyVIPsuBKKMumx/ABITjyM/z0ISMkQ1jhC2kSgMlNp8nx2R2guDyEzo0ClSQTHOiM5E6NZC+miDcYYzlmbxDd/c2BKq3wpvY6a43kb3/zNgVLi3sGhLFoiGg6P5uv9LZFlzhHA0bHCtJ+vPHSZIGX1z+ka9zvPTqTnugIQ/qye4O+Tv06W/se/LmfiL0LKiqDI9O+b+felKUBnfCLgmK39/Hx2R2guDyEzo0ClCQTHOs/3pzBecErD5BjgvyuTWOUHKVnTwXCmCNMRpS3ux18aww8eP4zetghsV0KIyhdrQpYKZ34VDfNL4av8Gsqy25YHEQwSVpXfW4mJAYvln1U5q5iuDACMeYMMpR/QBDEPn7SrAj9JN6SppSnTpisw7ie3TleaPJ/dEZrLQ8jMqIV+gwuOdZ49Ml4RpAATL9CuAPrHizg6lsexsQIKfhkD8//HdgX+4d/348hoHprCkCpYK6IPCKm/N5zRib96/UYEneKF9IID25WzdueffPxTsKf/gmqDNRXOoCkc5fGEN4SQIWqopV0YhQOcMSjcmy+0Km4gGdJw+qoYzl6bnFP7+fLdkWqq7Y6s5Lk8Qkj0HU1h575h9B1NQVB2P6mCdlQaWHDenSnafkAy8z/isfxEgqw3AWVCznTwi92DaItqeH6guGjXTEiAAXj26Dj29Ke8appF7NNT/d4lGPMeOeiFIiTQGfOavR0ezUFhAAdDW0xH3NAQ0rwdjYLtYjRn43NvPxucsZrbz893d2SmtvvLtY/KXCqjyMpGgUoDC867I7qKVKG24CJ4sZ78UlqwXOwdSKMlrFFJMlkSDF6rec4Y2qIaTuTsWYPt+Zp8r5x7OSaMeRVArpSwHQGFAxFdhSMEAAZV8XZZcqaDzphRCiyCI5rxgo3LT++s+Tpm6gg927HRSprLM9fKKLKyUaDSwILzbk3hU0bGz2byrV0JnMhZGKPKAbJEgmbHQkqMZL3fu8XdV/EoHOiKhWBoHCrnkJCl5PGQpiKkcYwXvDlGwi9vNh2Boi0Q1r1k1pNJYD2Z3ZGVMJeH+saQuaJApYEF591CzjyWfi5oN4XUw1L83ukKQ3tUx/GMieOZIrqTIUR1FaN5C46QUBlDzFDx8ok8TD8PxIWflM6Yv8uiLEgC60raHZkr6htD5ooClQYWnHfvOZaq96UQ0tAUBnTEDLRFdRiagmPjBYxkrFIps65wxAwVozkLQkov0ZYx2K7wktKlRNERUG131iOaWq2E3ZH5oL4xZK6o6qfBlGfB7+lP4wOXbYChKbNWSBCyEiicoVrsICQwnDXx8okcGGNY3x5BMqzhxt87Dd++5nyct74V6aINVwioCvOrfBhUZeLORjLFmip7yMmZT2UUWdnquqPy0EMP4Utf+hKeeuopDAwM4P7778dVV11Vz0uqq+my4C8/vQP/+rtjcIWkoxuyonHmd5vFRK6LyuHnogAFW+DYWAGrkyGAAad2RHFObwuu3LYaj740CgB+0C9LOSq6wpAIaxBC4q/fdCbe9qoeOqJZRNQ3hsxVXXdUcrkczjnnHHzjG9+o52U0hCALfu9AGlFDRVfcQNRQsXcgg537RpAIaVjTEsYp7RFE9andKwlZ7hi8HUeFs1IPFJUDmqKAMW+XROMMrpQYyphQGUrvynvbIojpqj8DSMIREkJKhDWONa0RrIqHoCgcbTGdgpRFtpL7xpD5qeuOypVXXokrr7yynpfQEGbKgl8VZzg6VoDj91FROEpzTghZKRiAloiKd16wHl1xA9/4jwPIFh04QkJC+n1avGRMhUuYjouuRAxCSuzcN4zRrIWIzhE1dABe4qzKeUXflLkeN5SPtRjP2WiNaGiPGZQ0W4OV2DeGzF9TJdOapgnTNEt/T6fTdbyahVMtC15KidGc5SWeORKulAAoQCEri8q9I56QqoAzjt3HUnjvpaeCgWFVMoSB8aI3aJB7U46lBFzX64WfKti4/ntPwXYlVIUha7pIFRysToYQM9Rp5/cEAchM1TrlYy3SRQdCSHDOkAhpOKsnQYttDagyitSqqQKV7du349Zbb633ZSy4yVnwWdPBQKqAok2N7snyN1NvFSm96chdiRAUznBwKIvxnA1NYdAVjjWtYQxnTJiOCym8YEXhHI7wGqx1xg1YrsBQ2kTR9nqnHBrJIaQp6IobUBWGE1kLhsrxpi3d2HVwBLc9dGjGbqnBMe1ozvKOLaQXpAghkSrYeO7oODUtqxFVRpFaNFXVz80334xUKlX6c+TIkXpf0oIoz4LPmg6OjuYpSCErxkz54ZrqBSMxQ4WhcNhCojWiYWNXDGN5G1FdwSkdEaxvi2Jtaxi9LWFIeHksa1pDcITEwHgRtiugKcwfiAgUbRdHxvJ45UQeBdtF0RH4X796Ee+/60k8d3R8Sp7YLff3YdeBkSljLYQENO41ltP8gUaOK5E1HezYeZBm1xCyAJoqUDEMA4lEouJPs6k2hCvIgh/NmRhMefkohKxkCveOfdYkvSBFQiJdtCGExFjexgcu21BKxizaAobKoSoco3kbQgJdcS/XazhjQkjv6EfhHJrCoXCG9phWKvlf2xrCmmQIBUvAtAXypgvHP8oJaQq6EwayposdOw+i71iqNNbCcgVUzkpHSAxekq/lCoQ1pdS0jBBycprq6KdZBWfeDx8YxgN7jmNwPI+iI8EZsK49io+98XRcdloHHnvpRNUx9oQ0u2B6slNlo1BhXmfY1qiGTNGF5bqABEK6irChIGs6GEoXUbBdKJzh73+xF5tWxXH1hevw0P6RimTMta1hHBkroCWsoWgJmI73NaVkW3jHSVnTLe2uMHBYroQtBDSVQQhgOGMiaihgYBXdUp8+Ml421sL7+nKMoXQEZVPTMkIWRF0DlWw2iwMHDpT+/tJLL+GZZ55BW1sb1q1bV8crWzgTSXdpjOctCP/FLXgX9tzRcbz3O08gaqiLPmGWkLqRXj6CwiTcSb/inDF0Jgy0hnWoioXBlJc0ngxryBQdHBsrwBXerkhPMgxd5dg7kMGR0Tw+e9VWJMM6TmRNjOVtjOZN/MO/HyjNtJISYLziMgAAjiugcAYh4bfO9/NhGAPjgOm4KFoTs3+CbqlMojTWgjHv/spjlSB4kRLUtIyQBVLXQOXJJ5/EG97whtLfb7rpJgDANddcg+985zt1uqr5m1wtkCpY+MSPdyNrOshbLqRXjOBtOUsJlXsvopYrYeXtel8+IYvG8frUl/7OmReIvP3cNdh3PINDwzkMZU1onJUafZ3IWugfL0JIiYiuoCvhVesAKA2vu+2hQ/jAZRvw7f98Cc/3p5Aq2HAEMA4bHH4gwQCVM0i/f4qmMNiOBLgXZKjci2RKgYe/KxLM/gEmuqW+al0LNnbF8Hx/GrrCUXQENO698ZDwWggYKkfBdrF5dYKalhGyAOoaqLz+9a+f81TgRlWtq2zeb2TUGTMwnrem7JVU2wYnZDljCIYAArrKccXmVfjEW86aUqIKAD95ph+f+dkeRA0VybBW0cE0OI55vj+Fv/7hc8iZDgp+VY/CAVf405sB2K6ElN5MH4V5uxxDmSJcVyKsKwhpXqDiBRgCCguCG+/j5eXL29Ykcf3lG3HL/X2wXQnOBGwhwJlX9cOY15Y/ZqjUtIyQBUI5KgsgKFfMmg5aIzp0hSNdtJEu2FA4Q9ZySrsphKxkzM9HMVSOgiWwY+dBXLShvWqJaltMh8I5EqHKICWgc4Z00UFIFRASpQocxhgcJmCX7eA4wutC2xUPQVMZWNY7vumIGaX77oyHcGwsD9uVCGkKdNVrBDd5SGF5szLqo0LI4qNA5SRN11XWS+ADhJRIFxwKUggBSlUyRUeAM4Hn+1PY05+uHqiUle2H+NSxEWnTCxAiuorRvFVRgaNyDgYBISWiuoqc5SKqq8jbLjSX4czuOIYyJrKmC1XhMPxqoJCmgnMXEV3BcNaatltqebMy6kxLyOKiQOUkVesqC3gvlMGLlSMENIXDpLMessJ5DdwYNA7YQiBddDCSM6vedrbhdemCA84ZDK16BQ7nDMIFkhENmspx4++dhlM7oqXjpUcPnZjSwv2c3iQ+cNkGJMP6rN1SqVkZIUuDApWTNLmrbCCkcxiqgoLllM7ThzIm7ayQZUFhlUeZNbf+8df7YIigEBLjueqJ5MHwulvu78Ng2kRLRIOhcJiu13U2aijQFDZRaYPpK3B0heM161orAgtq4U5Ic2iqhm+NqHx7uhwDQ2fcO/8WUkJTOToTRp2ukpCFw4BSHxFeJXekFhKylNfRGtGmvV2QD7J5dRx508FQ1kTedLB5dRxf+pOzcVZPAnnLha5wb0Chn5wfVODoileBs7ErVrUCJ9gVufz0Tmxbm6QghZAGRDsqJ2mm7emornhNoxiD6wrkik4dr5SQk6dwoDWiYTxvgzGgPapjJGcBNVbvMeblbbl+hUwi5OV1zGSmnQ/O2IJW4NQykJAQsrQoUDlJs21Pt0Z0fPaqrQjrCt79rcfqfbmEnJSwpgDw2tGvihkIawpG81ZNc70ZvMnGnMNvec9wVk9tvUamywdZyAqcai0GJg8kJIQsPSabuJFJOp1GMplEKpWq+9yfihc5PzEveJETUuKj//IMhrPUTps0J40zhHWO/37ZRsQNDf/4HwfQFTfAOHBwKIvCLEM0OQPaojpUzuAKCduVaIlo004YnuvORnD7+VbgVGsxYLkCY35pMk1CJmRhzWX9ph2VBTLd9vS3fnsQX/jFi7UnGxLSgFwpoasKLj+9CwBKeVmOLSv6lVTTnTAQ1hX0+1OMAa8qrrctXPX289nZOJkKnOlaDIS4UuqAG/R7oWMgQpYeJdMuoMmJebf/9hA+/3MKUkjzExLoToSwxT+q2dgVw1jewlC6CMCrqpm8hnMAGzui+Ps/ORvCb7jWnQjhlPYo1rWFMZAyccv9fdh1YKT0NcHOxt6BNKKGiq64gaihYu9AZsptF8p0LQaAiQ64NAmZkPqhQGWehJDoO5rCzn3D6DuagiiLRoSQ+O4jL+Pvf/FCHa+QkIV1/qltXgKrn5el+RU1XrdZQFUYFH+uTk8yhA1dUeQtB1/91X7kLBdrWyNoj3mBR1hX0Z0wkDVd7Nh5EELIKTsbIU0B5wwhTZly24U0XYuBgKFwmoRMSB3R0c88zLQ17QiBz/xsLw4OZ2knhSwr+wYzpUTVizd14D2vPQVf/dWLgAQcf5pwWFfQGfeGBwohMeJYODKaR1t05t2KnzzTj1TRxgsDGbREprbMn7yzsZCN1mbrgBsMJKRJyITUBwUqczRd0t3egQz++3efRNaspf6BkObCGbDveGWQcOmmDty16yWofvt5lXOEtIkSfdMV4PDKkafbrbBdgeGsic/8bA9cAWRMG3nLqZiUHDAUjtQi7GzM1gE3GEhIk5AJqQ86+pmD6bamDY1DCEFBClm2hATyllMRJGzpSWDTqjgKtkDMUBHWldIiHyzw69qjCGvKlIaIAJA1HRwbK8AVElFDRXtMB2cMRdvFsbECsmZl36HF2tkIjrJihoLBtImCP/W8YLsYTJsVAwkJIUuPApU5qJZ0lzUdHBrOYjRfvQ04IY1stqWXld2mYLs4Mpovfa6WBf5jbzzdT7y1Ud4JQUJiKF2EKyTCmoJkWENEVxDSOMAAVwgMZ0xIv1F/EPhM12H2ZM3UAZdKkwmpLzr6mYPJSXdZ08GR0TwcSkYhzYoBTGLGGVTB5xTG8IvdA/izC9aVdhfKG66VD/crnzgcdI8tb4iYLtoo2C5UhaGrrCS4Mx7ydlmkQNF2kDddcM4w7vczWcydDZr9Q0hjokBlDsqT7gzOMZgqUJBCmt8MwUrwMZUzdCYMHBrOTUlmnW2BrxbMCCGhcIaeZLgiFyVmqFjTGsZQuoiC7eJEzkJUVyoCn8VEE5EJaTwUqMxBedJdIqSgOEs3TkIakc4BW3hBSDBheDoMgKFxrE6GEdEUDGXNqsmssy3wk4OZ0ayFv//FXujq1NPnmKGCJ0NIFWx88A2n4dXrW2lng5AVjAKVOXrTlm7sO57BQMqccbuckEbEAIR1DQmF4UTOKgUrkyVCKqKGioimlJJkC7Z7Usms5cGMEBI/evrotJU2qYKDzasT+PPXrqcAhZAVjpJpa7TrwAiuueNxfPM/DiBnOjAdqvAhjeWiU1tn/DwDoKscp3ZEAcawrj2MsKZA4QwKZ9A4A4M3Ibm3NYyOmIGIoYIxtuDJrFRpQwipFQUqNXho3xA+dM/TePzQCQxlisiaLjVzI3XHmfcPWOXA1p44vve+i3BqR2TK7YLKHcaA01fF8LE3nY6YoSBnCvS0hLC+LVJqVd8V19ERM3A8Yy168ECVNoSQWtD05FnctvMgvvTAi5Q0SxoGA2CoHG1RHXnbRUt4YgrxrgMj+Oi9z+BE1oLw/2lzAIwztEd1fPVPX1W63XTTvgFM+7nFCB7mOimZENL85rJ+U6Ayg9sfOojtP3+Bdk9Iw+AM4IxBSIn2qIEzq1TD7Dowgm/+5iBeHMzAcgV0heOM7jj+6vWVt5spQKDggRCymOayflMy7TQcR+DrD+6nIIU0lFVxA2FdxYmchRt+bxPec9HUZNNa+4HMVKlDZbqEkEZBgco0fvJsP7XEJw1FVzja4waKtkBUV/Cada3T7nJQoEEIWS4omXYazxwer/clkGVM5QwhjYOz2dvYB9a0hgCJRW0lTwghjYYClSqEkMhazuw3JGQeDJWjO2EgqqvobQ3j2ktOQcxQZvyaVXEDCudUuksIWXHo6GeSoBpi70C63pdClomgN4n0/xbSFAgJnNWTKCXC/v7mVfj8/9uLF49n4Lh+tQ7z+p5EdBUCKJXuLkUreUIIaRQUqJTZdWAEt9zfh6zpoCWiYSxnwaVkWlKFygDJAFd4gch/PbsbyYiOqK7iyi3dSJs2vvqr/TgymoeQ3oTgDZ0xvHlrN3rbIlXn4fz0xkvRdyyFZw6PQzLg3N4WbFmdwN7BDFXfEEJWLApUfEJI7Nh5EJmijaiuYjxvQ1U4XIfm+awkCvPyR2zhTcmOh1SEdQVSAqM5rwkaJCDgDfJriWi44fUb8ReXbZxyX5du6pxTiS/nDOf0tuCc3paKj1NSLCFkJaNAxbenP42DQ1m0hHUcHMnV+3LIHHB4RyuqHwSYrvTm1zAgbqiIhzRsXh3Hxs4odh0Ywf6hLExHwr8JGPP+hFQFiZCKTaviuOy0Djy0fwQHh7Io2AIaZ3j1+lb890s3YCRn4dh4HmtaInjr2auhVhmsB1DlDSGELAQKVHyjeQu2K9EaURDWFO+ds4+x6oPbSP0oHOiMGfjqn74KQGUn1RYGrEqG8aYtq3Dpps6qjcxGcibGczZaIxpao96QvfGCXbHz8b5LN1DTM0IIqTMKVHxtER2awmC5AomQCk1hiBoqoroKQ2M4NJxDwaZjoMXGGRDRFWzsjGHz6gReGEzjpZE8cqYDV0pwBsR0DdvWJis6rdbS4AyY2y4H7YgQQkj91T1Q+cY3voEvfelLGBwcxDnnnIN/+Id/wAUXXLDk17GlJ4GNXTF/7LxRMXY+bzowHQFD5TApZ2VBrIoZeO3GNmxbm0RLxEBrREOq4KA1oqE9ZpQCjWAH5ETWxFjeRktUQ0fUmBKIUFBBCCHLU10DlX/5l3/BTTfdhH/6p3/ChRdeiK997Wt405vehBdffBFdXV1Lei3B2Plb7u/DYNpES0SDoXCYrsBI1gQAdMcNHM8UUXToHCigMOD3N3fitO4kRnMWxnIm9h3PYChjQQjviGZ1i4E1LVG0hDWsb4/iLy/bAF2fuW9IgAIQQghZ2eo6lPDCCy/E+eefj3/8x38EAAgh0Nvbiw9+8IP4+Mc/PuvXL8ZQwmpTZbsSIRwZzaEtasAREq+cyC3bGUAM3vFLW0TF6d0JnLEqhsdfHse+4xnY7kQCqq5yvPP8XvztW7dMOWKhgXaEEEJm0hRDCS3LwlNPPYWbb7659DHOOa644go88sgjVb/GNE2Ypln6ezq98E3Zqg1029wdx3V3PlE6FlrfHsWR0Rya4RSIweuEamgKdIVDVRhUzsCYBOcM61ojuPz0Trx6fRs4Y1MSSgOOI/Bvzw1QtQshhJAlVbdAZWRkBK7rYtWqVRUfX7VqFV544YWqX7N9+3bceuuti35t1RbaycdCp3fFcTxTxFjeXrLdFY0zKEwiOHmKGyrWJENImS5aIxreeUEvzlyVwHNHUxhIF9GdDOHV61oXpGmYqnK8/dVrFuG7IoQQQqZX92Taubj55ptx0003lf6eTqfR29u7JI998aYOfP7t20rHQikhYagKLt6YwJu3rsaa1jBGMl5+RsEWiBkKnjsyhn1DOeRNB5brbb9oCoflSK+CBYCiMIQ1Be0xHRvaw8iZAnnbRVtUx9aeOMYLLqKG1+1065pkTQHHq09pm/Ix2uEghBDSjOoWqHR0dEBRFBw/frzi48ePH0d3d3fVrzEMA4ZhLMXlVVXtWGim3YnyXI2WsAbA69VR/t9z3eGggIMQQshKUrdARdd1vOY1r8GDDz6Iq666CoCXTPvggw/ixhtvrNdlzYr6cBBCCCFLp65HPzfddBOuueYanHfeebjgggvwta99DblcDtddd109L4sQQgghDaKugcp/+2//DcPDw/jUpz6FwcFBvOpVr8IvfvGLKQm2hBBCCFmZ6tpH5WQtRh8VQgghhCyuuazf1RthEEIIIYQ0AApUCCGEENKwKFAhhBBCSMOiQIUQQgghDYsCFUIIIYQ0LApUCCGEENKwmmrWz2RBZfViTFEmhBBCyOII1u1aOqQ0daCSyWQAYMkGExJCCCFk4WQyGSSTM4+aaeqGb0II9Pf3Ix6Pg7GpQ/2C6cpHjhyhhnB1Rj+LxkE/i8ZBP4vGQT+LpSWlRCaTQU9PDzifOQulqXdUOOdYu3btrLdLJBL0i9cg6GfROOhn0TjoZ9E46GexdGbbSQlQMi0hhBBCGhYFKoQQQghpWMs6UDEMA3/7t38LwzDqfSkrHv0sGgf9LBoH/SwaB/0sGldTJ9MSQgghZHlb1jsqhBBCCGluFKgQQgghpGFRoEIIIYSQhrWsA5VvfOMbOOWUUxAKhXDhhRfi8ccfr/clNa3t27fj/PPPRzweR1dXF6666iq8+OKLFbeRUuJTn/oUVq9ejXA4jCuuuAL79++vuE2xWMQNN9yA9vZ2xGIx/PEf/zGOHz9ecZvR0VFcffXVSCQSaGlpwfve9z5ks9lF/x6b1Re+8AUwxvCRj3yk9DH6WSydY8eO4d3vfjfa29sRDoexbds2PPnkk6XP089iabiui09+8pM49dRTEQ6HsXHjRnzmM5+paNFOP4smJZepe+65R+q6Lv/P//k/cs+ePfIv/uIvZEtLizx+/Hi9L60pvelNb5J33HGH3L17t3zmmWfkH/zBH8h169bJbDZbus0XvvAFmUwm5Y9//GP57LPPyj/8wz+Up556qiwUCqXb/OVf/qXs7e2VDz74oHzyySflRRddJC+++OKKx3rzm98szznnHPnoo4/K3/72t3LTpk3yXe9615J9r83k8ccfl6eccoo8++yz5Yc//OHSx+lnsTRGR0fl+vXr5bXXXisfe+wxeejQIfnAAw/IAwcOlG5DP4ul8bnPfU62t7fLn/3sZ/Kll16S9913n4zFYvLrX/966Tb0s2hOyzZQueCCC+QNN9xQ+rvrurKnp0du3769jle1fAwNDUkAcufOnVJKKYUQsru7W37pS18q3WZ8fFwahiHvvvvu0t81TZP33Xdf6TZ79+6VAOQjjzwipZTy+eeflwDkE088UbrNz3/+c8kYk8eOHVuKb61pZDIZedppp8lf/epX8vLLLy8FKvSzWDr/83/+T3nppZdO+3n6WSydt7zlLfK9731vxcf+6I/+SF599dVSSvpZNLNlefRjWRaeeuopXHHFFaWPcc5xxRVX4JFHHqnjlS0fqVQKANDW1gYAeOmllzA4OFjxnCeTSVx44YWl5/ypp56CbdsVtznzzDOxbt260m0eeeQRtLS04Lzzzivd5oorrgDnHI899tiif1/N5IYbbsBb3vKWiucToJ/FUvrpT3+K8847D+94xzvQ1dWFc889F7fffnvp8/SzWDoXX3wxHnzwQezbtw8A8Oyzz+Lhhx/GlVdeCYB+Fs2sqWf9TGdkZASu62LVqlUVH1+1ahVeeOGFOl3V8iGEwEc+8hFccskl2Lp1KwBgcHAQAKo+58HnBgcHoes6WlpaZrxNV1dXxedVVUVbW1vpNgS455578Lvf/Q5PPPHElM/Rz2LpHDp0CDt27MBNN92EW265BU888QQ+9KEPQdd1XHPNNfSzWEIf//jHkU6nceaZZ0JRFLiui8997nO4+uqrAdC/i2a2LAMVsrhuuOEG7N69Gw8//HC9L2VFOnLkCD784Q/jV7/6FUKhUL0vZ0UTQuC8887D5z//eQDAueeei927d+Of/umfcM0119T56laWe++9F9///vfxgx/8AFu2bMEzzzyDj3zkI+jp6aGfRZNblkc/HR0dUBRlSqb28ePH0d3dXaerWh5uvPFG/OxnP8N//Md/VEyuDp7XmZ7z7u5uWJaF8fHxGW8zNDRU8XnHcTA6Ovr/t3d/sU3VfRzH32VlU+hmJybbgP1hCNJBQzampJBgZAtsJEsdibCxzA0vSEDNVJCQqBf+Q4IZqAs3msguHJFoNogmorMTlEX2z3UqlI2MzO6i4J9R2cQorr/nwscTKzzPVGDryOeVnItzft9zzu+cX7p9ek5Pq7H7r66uLr799lvy8vKw2+3Y7XaOHTvGa6+9ht1ut94xaixuvLS0NHJycqKWuVwugsEgoNfFeHryySfZsWMHZWVluN1uKisrefzxx3nppZcAjcVkdlMGlfj4eJYsWYLP57OWRSIRfD4fHo9nAns2eRljeOSRR2hqaqKlpYU5c+ZEtc+ZM4fU1NSoc37x4kXa2tqsc75kyRKmTp0aVdPb20swGLRqPB4P4XCYrq4uq6alpYVIJMLSpUtv5CFOGgUFBXz11Vf4/X5rys/Pp6KiAr/fT3Z2tsZinCxfvvyKx/T7+vrIzMwE9LoYT5cuXWLKlOh/aXFxcUQiEUBjMalN9Kd5b5S3337bJCQkmPr6enPq1CmzadMm43Q6zblz5ya6a5PS5s2bzW233WaOHj1qQqGQNV26dMmq2bVrl3E6nebw4cPmyy+/NF6v96qP/mVkZJiWlhbT2dlpPB6P8Xg8UfsqKioyubm5pq2tzRw/ftzMmzdPj/6N4c9P/RijsRgv7e3txm63mxdffNGcOXPGNDQ0mGnTppm33nrLqtFYjI+qqioza9Ys6/HkxsZGc8cdd5jt27dbNRqLyemmDSrGGFNXV2cyMjJMfHy8ueeee8yJEycmukuTFnDVaf/+/VZNJBIxzzzzjElJSTEJCQmmoKDA9Pb2Rm3n559/Nlu2bDHJyclm2rRpprS01IRCoaiaH374wZSXlxuHw2GSkpLMxo0bzfDw8Hgc5qT116CisRg/7733nlm0aJFJSEgwCxYsMK+//npUu8ZifFy8eNHU1NSYjIwMc8stt5js7Gzz1FNPmV9++cWq0VhMTvr1ZBEREYlZN+VnVEREROTmoKAiIiIiMUtBRURERGKWgoqIiIjELAUVERERiVkKKiIiIhKzFFREREQkZimoiIiISMxSUBGR68IYw6ZNm7j99tux2Wz4/f4bsp+srCxeeeWVG7JtEYk9Cioicl0cOXKE+vp63n//fUKhEIsWLcJms3Ho0KGJ7pqITGL2ie6AiNwc+vv7SUtLY9myZRPdFRG5ieiKiohY3n33XdxuN7feeiszZsygsLCQn376idHRUZ544gmcTiczZsxg+/btVFVVcf/99wNQXV3No48+SjAYxGazkZWVRVZWFgClpaXWsrH09/fj9XpJSUnB4XBw99138/HHH19RNzw8THl5OdOnT2fWrFns27cvqj0YDOL1enE4HCQlJbFu3TrOnz8PQF9fHzabjdOnT0ets3fvXubOnWvNf/311xQXF+NwOEhJSaGyspLvv//+H5xNEbkeFFREBIBQKER5eTkPPfQQgUCAo0ePsnbtWowx1NbWUl9fz5tvvsnx48cZGhqiqanJWvfVV1/lueeeY/bs2YRCITo6Oujo6ABg//791rKxjIyMsGbNGnw+H93d3RQVFVFSUkIwGIyqe/nll1m8eDHd3d3s2LGDmpoampubAYhEIni9XoaGhjh27BjNzc2cPXuW9evXAzB//nzy8/NpaGiI2mZDQwMbNmwAIBwOs3LlSnJzc+ns7OTIkSOcP3+edevW/fsTLCL/zsT+eLOIxIquri4DmIGBgSva0tLSzO7du635y5cvm9mzZxuv12st27t3r8nMzIxaDzBNTU3X1K+FCxeauro6az4zM9MUFRVF1axfv94UFxcbY4z56KOPTFxcnAkGg1b7yZMnDWDa29utvs6dO9dq7+3tNYAJBALGGGOef/55s2rVqqh9DA4OGsD09vZe0/GIyD+jKyoiAsDixYspKCjA7XbzwAMP8MYbb3DhwgV+/PFHQqEQS5cutWrtdjv5+fnXvQ8jIyNs27YNl8uF0+nE4XAQCASuuKLi8XiumA8EAgAEAgHS09NJT0+32nNycnA6nVZNWVkZAwMDnDhxAvj9akpeXh4LFiwAoKenh08++QSHw2FNf7T19/df9+MWkf9NQUVEAIiLi6O5uZkPPviAnJwc6urquOuuuxgYGBi3Pmzbto2mpiZ27tzJZ599ht/vx+128+uvv17X/aSmprJy5UoOHDgAwIEDB6ioqLDaR0ZGKCkpwe/3R01nzpxhxYoV17UvIvL/KaiIiMVms7F8+XKeffZZuru7iY+Px+fzkZaWRltbm1X322+/0dXVNeb2pk6dyujo6N/ef2trK9XV1ZSWluJ2u0lNTb1qUPrjSsif510uFwAul4vBwUEGBwet9lOnThEOh8nJybGWVVRUcPDgQT7//HPOnj1LWVmZ1ZaXl8fJkyfJysrizjvvjJqmT5/+t49HRK6dgoqIANDW1sbOnTvp7OwkGAzS2NjId999h8vloqamhl27dnHo0CFOnz7Nli1bCIfDY24zKysLn8/HuXPnuHDhwpj18+bNo7GxEb/fT09PDxs2bCASiVxR19rayu7du+nr62Pfvn2888471NTUAFBYWIjb7aaiooIvvviC9vZ2HnzwQe69996o21Vr165leHiYzZs3c9999zFz5kyr7eGHH2ZoaIjy8nI6Ojro7+/nww8/ZOPGjf8oeInItVNQEREAkpKS+PTTT1mzZg3z58/n6aefpra2luLiYrZu3UplZSVVVVV4PB4SExMpLS0dc5u1tbU0NzeTnp5Obm7umPV79uwhOTmZZcuWUVJSwurVq8nLy7uibuvWrXR2dpKbm8sLL7zAnj17WL16NfD7VaHDhw+TnJzMihUrKCwsJDs7m4MHD0ZtIzExkZKSEnp6eqJu+wDMnDmT1tZWRkdHWbVqFW63m8ceewyn08mUKfqzKTKebMYYM9GdEJHJp7q6mnA4rG+eFZEbSm8NREREJGYpqIjIuFm4cGHUI79/nv76BWwiIqBbPyIyjr755hsuX7581baUlBQSExPHuUciEusUVERERCRm6daPiIiIxCwFFREREYlZCioiIiISsxRUREREJGYpqIiIiEjMUlARERGRmKWgIiIiIjFLQUVERERi1n8ARV2QDNgORkcAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "\n\nWe can use the Pandas method <code>corr()</code>  to find the feature other than price that is most correlated with price.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "df.corr()['price'].sort_values()",
      "metadata": {
        "trusted": true
      },
      "execution_count": 22,
      "outputs": [
        {
          "execution_count": 22,
          "output_type": "execute_result",
          "data": {
            "text/plain": "zipcode         -0.053203\nlong             0.021626\ncondition        0.036362\nyr_built         0.054012\nsqft_lot15       0.082447\nsqft_lot         0.089661\nyr_renovated     0.126434\nfloors           0.256794\nwaterfront       0.266369\nlat              0.307003\nbedrooms         0.308797\nsqft_basement    0.323816\nview             0.397293\nbathrooms        0.525738\nsqft_living15    0.585379\nsqft_above       0.605567\ngrade            0.667434\nsqft_living      0.702035\nprice            1.000000\nName: price, dtype: float64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "# Module 4: Model Development\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "We can Fit a linear regression model using the  longitude feature <code>'long'</code> and  caculate the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "X = df[['long']]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 23,
      "outputs": [
        {
          "execution_count": 23,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.00046769430149007363"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question  6\n\nFit a linear regression model to predict the <code>'price'</code> using the feature <code>'sqft_living'</code> then calculate the R^2. Take a screenshot of your code and the value of the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "X = df[['sqft_living']]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 24,
      "outputs": [
        {
          "execution_count": 24,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.4928532179037931"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 7\n\nFit a linear regression model to predict the <code>'price'</code> using the list of features:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]     ",
      "metadata": {
        "trusted": true
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "Then calculate the R^2. Take a screenshot of your code.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "X = df[features]\nY = df['price']\nlm = LinearRegression()\nlm.fit(X,Y)\nlm.score(X, Y)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 27,
      "outputs": [
        {
          "execution_count": 27,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.6576890354915759"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### This will help with Question 8\n\nCreate a list of tuples, the first element in the tuple contains the name of the estimator:\n\n<code>'scale'</code>\n\n<code>'polynomial'</code>\n\n<code>'model'</code>\n\nThe second element in the tuple  contains the model constructor\n\n<code>StandardScaler()</code>\n\n<code>PolynomialFeatures(include_bias=False)</code>\n\n<code>LinearRegression()</code>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]",
      "metadata": {
        "trusted": true
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": "### Question 8\n\nUse the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features</code>, and calculate the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "pipe=Pipeline(Input)\npipe\npipe.fit(X,Y)\npipe.score(X,Y)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 33,
      "outputs": [
        {
          "execution_count": 33,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.7512398529081656"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "\n\n# Module 5: Model Evaluation and Refinement\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Import the necessary modules:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nprint(\"done\")",
      "metadata": {
        "trusted": true
      },
      "execution_count": 39,
      "outputs": [
        {
          "name": "stdout",
          "text": "done\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "We will split the data into training and testing sets:\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "features =[\"floors\", \"waterfront\",\"lat\" ,\"bedrooms\" ,\"sqft_basement\" ,\"view\" ,\"bathrooms\",\"sqft_living15\",\"sqft_above\",\"grade\",\"sqft_living\"]    \nX = df[features]\nY = df['price']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)\n\n\nprint(\"number of test samples:\", x_test.shape[0])\nprint(\"number of training samples:\",x_train.shape[0])",
      "metadata": {
        "trusted": true
      },
      "execution_count": 40,
      "outputs": [
        {
          "name": "stdout",
          "text": "number of test samples: 3242\nnumber of training samples: 18371\n",
          "output_type": "stream"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 9\n\nCreate and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.linear_model import Ridge",
      "metadata": {
        "trusted": true
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": "RidgeModel=Ridge(alpha=0.1)\nRidgeModel.fit(x_train, y_train)\nRidgeModel.score(x_test, y_test)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 43,
      "outputs": [
        {
          "execution_count": 43,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.647875916393906"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "### Question 10\n\nPerform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided. Take a screenshot of your code and the R^2.\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import Ridge\npr=PolynomialFeatures(degree=2)\nx_train_pr=pr.fit_transform(x_train)\nx_test_pr=pr.fit_transform(x_test)\npoly=Ridge(alpha=0.1)\npoly.fit(x_train_pr, y_train)\npoly.score(x_test_pr, y_test)",
      "metadata": {
        "trusted": true
      },
      "execution_count": 44,
      "outputs": [
        {
          "execution_count": 44,
          "output_type": "execute_result",
          "data": {
            "text/plain": "0.7002744270151646"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": "<p>Once you complete your notebook you will have to share it. Select the icon on the top right a marked in red in the image below, a dialogue box should open, and select the option all&nbsp;content excluding sensitive code cells.</p>\n        <p><img width=\"600\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/images/share_notebook.png\" alt=\"share notebook\" style=\"display: block; margin-left: auto; margin-right: auto;\"></p>\n        <p></p>\n        <p>You can then share the notebook&nbsp; via a&nbsp; URL by scrolling down as shown in the following image:</p>\n        <p style=\"text-align: center;\"><img width=\"600\" src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/images/url_notebook.png\" alt=\"HTML\" style=\"display: block; margin-left: auto; margin-right: auto;\"></p>\n        <p>&nbsp;</p>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "<h2>About the Authors:</h2> \n\n<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "Other contributors: <a href=\"https://www.linkedin.com/in/michelleccarey/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Michelle Carey</a>, <a href=\"https://www.linkedin.com/in/jiahui-mavis-zhou-a4537814a?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01\">Mavis Zhou</a>\n",
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": "## Change Log\n\n| Date (YYYY-MM-DD) | Version | Changed By      | Change Description                           |\n| ----------------- | ------- | --------------- | -------------------------------------------- |\n| 2020-12-01        | 2.2     | Aije Egwaikhide | Coverted Data describtion from text to table |\n| 2020-10-06        | 2.1     | Lakshmi Holla   | Changed markdown instruction of Question1    |\n| 2020-08-27        | 2.0     | Malika Singla   | Added lab to GitLab                          |\n\n<hr>\n\n## <h3 align=\"center\"> © IBM Corporation 2020. All rights reserved. <h3/>\n\n<p>\n",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}
